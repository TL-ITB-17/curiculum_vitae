[{"authors":["admin"],"categories":null,"content":"The author is a master\u0026rsquo;s student in Environmental Engineering, Institut Teknologi Bandung with fields of Technology and Environmental Management. Currently active writers in communities such as R Indonesia and Machine Learning ID.\nBesides being active in the community, the writer is also active in writing blogs. The theme of the blog that the author makes is related to data analytics and environmental modeling.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"The author is a master\u0026rsquo;s student in Environmental Engineering, Institut Teknologi Bandung with fields of Technology and Environmental Management. Currently active writers in communities such as R Indonesia and Machine Learning ID.\nBesides being active in the community, the writer is also active in writing blogs. The theme of the blog that the author makes is related to data analytics and environmental modeling.","tags":null,"title":"Mohammad Rosidi, S.T.","type":"author"},{"authors":null,"categories":null,"content":"\rPada section ini penulis akan menyajikan beberapa tutorial terkait analisa data dan modeling menggunakan R. Tutorial secara garis besar akan membahas:\n\rAnalisa dan modeling data menggunakan metode statistik di R\rAnalisa dan modeling lingkungan menggunakan R\rOptimasi operasi menggunakan R\r\rPembahasan juga akan meliputi analisa statistik menggunakan GUI R (R Commander) untuk menganalisa data.\n","date":1551373200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1551373200,"objectID":"fe0f055b9d498b98f202fea04c5beccd","permalink":"/tutorial/","publishdate":"2019-03-01T00:00:00+07:00","relpermalink":"/tutorial/","section":"tutorial","summary":"Pada section ini penulis akan menyajikan beberapa tutorial terkait analisa data dan modeling menggunakan R. Tutorial secara garis besar akan membahas:\n\rAnalisa dan modeling data menggunakan metode statistik di R\rAnalisa dan modeling lingkungan menggunakan R\rOptimasi operasi menggunakan R\r\rPembahasan juga akan meliputi analisa statistik menggunakan GUI R (R Commander) untuk menganalisa data.","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"\r\rDaftar Isi:\r\rImport File\rEksport File\rTibble Data Format\rMerapikan Data\rTransformasi Data\r\r\r3.1 Import File\rPada sesi bagian ini penulis akan menjelaskan cara mengimport file pada R. File yang diimport ke dalam R terdiri atas file yang sering digunakan pada saat akan melakukan analisis data, antara lain: TXT, CSv, Excel, SPSS, SAS, dan STATA.\nPada bagian ini akan dijelaskan pula bagaimana melakukan import data menggunakan library readr serta kelebihan dari metode import data yang digunakan. Berikut adalah cara mengimport data berbagai format pada R.\n\rNote:  Pastikan kita telah mengatur lokasi working directory pada tempat dimana lokasi file yang akan kita baca berada untuk mempermudah dalam melakukan import file.\n\r3.1.1 Import File Menggunakan Fungsi Bawaan R\rFungsi bawaan R secara umum hanya dapat membaca data dengan format TXT dan CSV. Pada RStudio fungsi ini bertambah dengan adanya library tambahan yang telah terinstall di RStudio untuk membaca file dengan format EXCEL, SPSS, SAS dan STATA.\nSecara umum fungsi yang digunakan untuk membaca data dengan format tabel seperti TXT dan CSV adalah fungsiread.table(). Berikut adalah list fungsi dasar lainnya untuk membaca file dengan format TXT dan CSV pada R:\n\rread.csv(): untuk membaca file dengan format comma separated value(“.csv”).\rread.csv2(): varian yang digunakan jika pada file “.csv” yang akan dibaca mengandung koma (“,”) sebagai desimal dan semicolon (“;”) sebagai pemisah antar variabel atau kolom.\rread.delim(): untuk membaca file dengan format tab-separated value(“.txt”).\rread.delim2(): membaca file dengan format “.txt” dengan tanda koma (“,”) sebagai penujuk bilangan desimal.\r\rMasing-masing fungsi diatas dapat dituliskan kedalam R dengan format sebagai berikut:\n# Membaca tabular data pada R\rread.table(file, header = FALSE, sep = \u0026quot;\u0026quot;, dec = \u0026quot;.\u0026quot;)\r# Membaca\u0026quot;comma separated value\u0026quot; files (\u0026quot;.csv\u0026quot;)\rread.csv(file, header = TRUE, sep = \u0026quot;,\u0026quot;, dec = \u0026quot;.\u0026quot;, ...)\r# atau gunakan read.csv2 jika tanda desimal pada data adalah \u0026quot;,\u0026quot; dan pemisah kolom adalah \u0026quot;;\u0026quot;\rread.csv2(file, header = TRUE, sep = \u0026quot;;\u0026quot;, dec = \u0026quot;,\u0026quot;, ...)\r# MembacaTAB delimited files\rread.delim(file, header = TRUE, sep = \u0026quot;\\t\u0026quot;, dec = \u0026quot;.\u0026quot;, ...)\rread.delim2(file, header = TRUE, sep = \u0026quot;\\t\u0026quot;, dec = \u0026quot;,\u0026quot;, ...)\r\rNote: \n\rfile: nama file diakhiri dengan format file (misal: “nama_file.txt”) yang akan di import ke dalam file. Dapat pula diisi lokasi file tersebut berada, misal:(C:/Users/My PC/Documents/nama_file.txt atau .csv)\rsep: pemisah antar kolom. “” digunakan untuk tab-delimited file.\rheader: nilai logik. jika TRUE, maka read.table() akan menganggap bahwa file yang akan dibaca pada baris pertama file merupakan header data.\rdec: karakter yang digunakan sebagai penunjuk desimal pada data.\r\r\rUntuk info lebih lanjut terkait fungsi-fungsi tersebut dan contoh bagaimana menggunakannya, pembaca dapat mengakses fitur batuan dari fungsi tersebut menggunakan sintaks berikut:\n# mengakses menu bantuan\r?read.table\r?read.csv\r?read.csv2\r?read.delim\r?read.delim2\rMisalkan penulis memiliki data pada file bernama “mtcars.csv” dengan desimal berupa titik pada datanya. Penulsi ingin membaca file tersebut, maka penulis akan menuliskan sintaks berikut:\ndata \u0026lt;- read.csv(\u0026quot;mtcars.csv\u0026quot;)\rSecara default perintah tersebut akan membaca baris pertama data sebagai header serta data berupa karakter menjadi factor. Untuk mencegah agar data berupa karakter menjadi faktor, perintah tersebut dapat ditambahkan parameter stringAsFactor = FALSE.\nKita juga dapat memilih file yang akan kita baca secara interakti. Misal pada working directory terdapat beberapa file yang akan kita baca. Kita ingin melihat file dengan format tertentu yang hendak kita baca, namun kita malas mengecek file explorer pada windows. Untuk mengatasi masalah tersebut, kita dapat menggunakan fungsi file.choose() pada R. Fungsi tersebut akan menampilkan jendela windows explores sehingga kita dapat memilih file apa yang hendak dibaca. Berikut adalah contoh penerapannya:\ndata \u0026lt;- read.csv(file.choose())\r\rNote:  pastikan format file yang dibaca sama dengan fungsi import yang digunakan.\n\rKita juga dapat membaca file dari internet. Untuk melakukannya kit hanya perlu meng-copy url file tersebut. Berikut adalah contoh file yang dibaca dari internet:\n# Membaca file dari internet\rdata \u0026lt;- read.delim(\u0026quot;http://www.sthda.com/upload/boxplot_format.txt\u0026quot;)\r# mengecek 6 observasi awal\rhead(data)\r## Nom variable Group\r## 1 IND1 10 A\r## 2 IND2 7 A\r## 3 IND3 20 A\r## 4 IND4 14 A\r## 5 IND5 14 A\r## 6 IND6 12 A\r\r3.1.2 Membaca File CSV dan TXT Menggunakan Library readr\rPada bagian sebelumnya kita telah belajar bagaimana cara membaca file dengan format CSV dan TXT menggunakan paket dasar R. Pada bagian ini penulis akan menjelaskan bagaimana cara membaca file dengan format TXT dan CSV pada R menggunakan paket readr.\nreadr dikembangkan oleh Hadley Wickham. paket readr memberikan solusi cepat dan ramah untuk membaca delimited file ke dalam R.\nDibandingkan dengan paket dasar R, readr memiliki kelebihan sebagai berikut:\n\rMampu membaca file 10x lebih cepat dibandingkan pada paket bawaan R.\rMenampilkan progress bar yang bermanfaat jika proses pemuatan berlangsung agak lama.\rsemua fungsi bekerja dengan cara yang persis sama dengan paket bawaan R.\r\rUntuk dapat menggunakan readr, kita perlu menginstall paketnya terlebih dahulu. Untuk melakukannya jalankan sintaks berikut:\n# Menginstall paket\rinstall.packages(\u0026quot;readr\u0026quot;)\r# Memuat paket\rlibrary(readr)\rBerikut adalah format bebrapa fungsi yang dapat digunakan:\n# Fungsi umum (membaca TXT dan CSV) dapat juga membaca flat file dan tsv\rread_delim(file, delim, col_names = TRUE)\r# Membaca comma (\u0026quot;,\u0026quot;) separated values\rread_csv(file, col_names = TRUE)\r# Membaca semicolon (\u0026quot;;\u0026quot;) separated values\rread_csv2(file, col_names = TRUE)\r# Membaca tab separated values\rread_tsv(file, col_names = TRUE)\r\rNote: \n\rfile: path file, koneksi atau raw vector. File yang berakhiran .gz, .bz2, .xz, atau .zip akan secara otomatis tidak terkompresi. File yang dimulai dengan “http: //”, “https: //”, “ftp: //”, atau “ftps: //” akan diunduh secara otomatis. File gz jarak jauh juga dapat diunduh \u0026amp; didekompresi secara otomatis.\rdelim: karakter yang membatasi tiap nilai pada file.\rcol_names: nilai logik. Jika TRUE, maka baris pertama akan menjadi header.\r\r\rBerikut adalah contoh bagaimana cara membaca file menggunakan fungsi pada paket readr:\n# Membaca file lokal\rdata \u0026lt;- read_csv(\u0026quot;mtcars.csv\u0026quot;)\r# atau\rdata \u0026lt;- read_csv(file.choose())\r# Membaca dari internet\rdata \u0026lt;- read_tsv(\u0026quot;http://www.sthda.com/upload/boxplot_format.txt\u0026quot;)\rKita juga dapat menspesifikasi jenis data pada kolom yang akan dibaca. Keuntungan dari penentuan jenis kolom (tipe data) akan memastikan data yang telah dibaca tidak salah berdasarkan jenis data pada masing-masing kolom.\nBeberapa format jenis kolom yang tersedia pada readr adalah sebagi berikut:\n\rcol_integer(): untuk menentukan integer (alias = “i”).\rcol_double(): untuk menentukan kolom sebagai jenis data double (alias = “d”).\rcol_logical(): untuk menentukan variabel logis (alias = “l”).\rcol_character(): meninggalkan string apa adanya.Tidak mengonversinya menjadi faktor (alias = “c”).\rcol_factor(): untuk menentukan variabel faktor (atau pengelompokan) (alias = “f”)\rcol_skip(): untuk mengabaikan kolom (alias = “-” atau “_“)\rcol_date() (alias = “D”), col_datetime() (alias = “T”) dan col_time() (“t”) untuk menentukan tanggal, waktu tanggal, dan waktu.\r\rBerikut adalah contoh penerapannya:\ndata \u0026lt;- read_csv(\u0026quot;my_file.csv\u0026quot;, col_types = cols(\rx = \u0026quot;i\u0026quot;, # kolom integer\rtreatment = \u0026quot;c\u0026quot; # kolom karakter/string\r))\r\r3.1.3 Import File Excel Pada R\rKeunggulan penggunaan excel sebagai format penyimpan data adalah kita dapat menyimpan banyak data dan memisahkannya pada lembar (sheet) yang berbeda sebagai suatu data yang independen dibandingkan pembacaan pada file csv yang hanya berisikan satu tabel data saja tiap file.\nPada R kita dapat melakukan pembacaan file menggunakan berbagai macam cara seperti menggunakan paket bawaan R maupun menggunakan library yang perlu kita install. Berikut adalah beberapa cara membaca file excel pada R.\nMengkonversi terlebih dahulu satu sheet excel yang akan kita baca menjadi format “.csv” maupun “.txt” sehingga dapat dibaca seperti pada sub-bab 3.1.1.\n\rMenyalin data dari excel dan mengimport data pada R.\n\r\rCara ini sedikit mirip dengan cara sebelumnya, dimana kita perlu membuka file excel dan melakukan select dan copy (ctrl+c) tabel data yang hendak dibaca. Data tersebut selanjutnya akan tersimpan pada clipboard.\nData yang telah tersalin selanjutnya diimport ke R dengan mengetikkan sintaks berikut:\ndata \u0026lt;- read.table(file= \u0026quot;clipboard\u0026quot;,\rsep = \u0026quot;\\t\u0026quot;, header = TRUE)\rCara ini merupakan cara yang paling sering penulis gunakan. Kelemahan penggunaan cara ini adalah ketika kita melakukan proses select dan copy (ctrl+c) tabel yang jumlahnya sangat banyak dan terdapat teks-teks penjelasan terkait tabel data pada lembar kerja excel yang tidak ingin kita sertakan akan memakan waktu yang lebih lama pada proses select.\nMengimport data menggunakan library readxl.\r\rPaket readxl, yang dikembangkan oleh Hadley Wickham, dapat digunakan untuk dengan mudah mengimpor file Excel (xls | xlsx) ke R tanpa ada ketergantungan eksternal.\nUntuk dapat menggunakan library readxl kita harus menginstallnya terlebih dahulu menggunakan sintaks berikut:\n# Instal paket\rinstall.packages(\u0026quot;readxl\u0026quot;)\r# memuat paket\rlibrary(readxl)\rBerikut adalah contoh cara mengimport data dengan format xls atau xlsx pada R.\n# Tentukan sheet dengan nama sheet pada file\rdata \u0026lt;- read_excel(\u0026quot;my_file.xlsx\u0026quot;, sheet = \u0026quot;data\u0026quot;)\r# Tentukan sheet berdasarkan indeks sheet\rdata \u0026lt;- read_excel(\u0026quot;my_file.xlsx\u0026quot;, sheet = 2) # membaca sheet ke-2\rMengimport data menggunakan library xlsx\r\rPaket xlsx, solusi berbasis java, adalah salah satu paket R yang ampuh untuk membaca, menulis, dan memformat file Excel. Untuk dapat menggunakannya kita harus menginstall dan memuatnya terlebih dahulu. Berikut sintaks yang digunakan:\n# Menginstall paket\rinstall.packages(\u0026quot;xlsx\u0026quot;)\r# Memuat paket\rlibrary(xlsx)\rTerdapat dua buah fungsi yang disediakan pada paket tersebut yaitu read.xlsx() dan read.xlsx2(). Perbedaan keduanya adalah read.xlsx2() digunakan pada file data dengan ukuran yang besar serta proses pembacaan data yang lebih cepat dibandingkan dengan read.xlsx(). Fromat yang digunakan untuk kedua fungsi tersebut disajikan sebagai berikut:\nread.xlsx(file, sheetIndex, header=TRUE)\rread.xlsx2(file, sheetIndex, header=TRUE)\r\rNote: \n\rfile: nama atau lokasi file berada\rsheetIndex: Indeks dari sheet yang hendak dibaca\rheader: nilai logik. Jika bernilai TRUE, maka baris pertama dari sheet menjadi header.\r\r\rBerikut adalah contoh penggunaanya:\ndata \u0026lt;- read.xlsx(file.choose(), 1) # membaca sheet 1\r\rNote:  kita juga dapat membaca file dari internet seperti pada sub-bab 3.1.1.\n\r\r3.1.4 Membaca File Dari Format Aplikasi Statistik\rUntuk membaca file yang berasal dari format aplikasi statistik seperti SPSS, SAS, dan STATA kita perlu menginstal dan memuat paket-paket yang dibutuhkan sesuai dengan file yang akan kita install. Berikut adalah sintaks bagaimana cara mengimport file dari berbagai format aplikasi statistik.\n# membaca file SPSS\rinstall.packages(\u0026quot;Hmisc\u0026quot;) # menginstall paket\rlibrary(Hmisc) # memuat paket\r# simpan SPSS dataset pada transport format\rget file=\u0026#39;c:\\mydata.sav\u0026#39;.\rexport outfile=\u0026#39;c:\\mydata.por\u0026#39;. data \u0026lt;- spss.get(\u0026quot;c:\\mydata.por\u0026quot;, use.value.labels= TRUE) # use.value.labels digunakan untuk mengubah label menjadi factor\r# membaca file SAS\rinstall.packages(\u0026quot;Hmisc\u0026quot;) # menginstall paket\rlibrary(Hmisc) # memuat paket\r# simpan SAS dataset pada transport format\rlibname out xport \u0026#39;c:/mydata.xpt\u0026#39;;\rdata out.mydata;\rset sasuser.mydata;\rrun;\rdata \u0026lt;- sasxport.get(\u0026quot;c:/mydata.xpt\u0026quot;) # Variabel yang berupa karakter akan dikonversi menjadi factor\r# membaca file STATA\rinstall.packages(\u0026quot;foreign\u0026quot;) # menginstall paket\rlibrary(foreign) # memuat paket\rdata \u0026lt;- read.dta(\u0026quot;c:/mydata.dta\u0026quot;)\r\r\r3.2 Eksport File\rSetelah kita melakukan analisa dan telah memperoleh hasil yang kita inginkan dan memperoleh data frame berupa hasil prediksi suatu model atau data yang telah dibersihakan, kita ingin melakukan pelaporan dalam bentuk file dengan format seperti EXCEL, CSV atau TXT. Untuk melakukannya kita perlu melakukan eksport data yang telah dihasilkan.\nPada bagian ini penulis akan menjelaskan bagaimana cara mengeksport data dari R kedalam format TXT, CSV, maupun EXCEL. Sebenarnya R memungkinkan untuk melakukan eksport dalam format lain seperti RDA maupun RDS yang tidak dibahas dalam buku ini karena berada diluar lingkup buku ini.\n3.2.1 Eksport Data Menjadi Format TXT dan CSV\rTerdapat dua cara untuk melakukan ekport data dari R menjadi format TXT atau CSV, yaitu melalui paket dasar R maupun menggunakan library readr. Kedua cara tersebut memiliki sejumlah kemiripan dari segi fungsi, namun berbeda dari segi kecepatan eksport.\nFungsi dasar yang digunakan pada R untuk melakukan eksport file kedalam format TXT dan CSv adalah write.tabel(). Format umum yang digunakan adalah sebagai berikut:\nwrite.table(x, file, sep= \u0026quot; \u0026quot;, dec = \u0026quot;,\u0026quot;,\rrow.names = TRUE, col.names = TRUE)\r\rNote: \n\rx: matriks atau data frame yang akan ditulis.\rfile: karakter yang menentukan nama file yang dihasilkan.\rsep: string pemisah bidang atau kolom, mis., sep = “ t” (untuk nilai yang dipisahkan tab).\rdec: string yang akan digunakan sebagai pemisah desimal. Standarnya adalah “.”.\rrow.names: nilai logik yang menunjukkan apakah nama baris x harus ditulis bersama dengan x, atau vektor karakter nama baris yang akan ditulis.\rcol.names: baik nilai logik yang menunjukkan apakah nama kolom x harus ditulis bersama dengan x, atau vektor karakter nama kolom yang akan ditulis. Jika col.names = NA dan row.names = TRUE ditambahkan nama kolom kosong, yang merupakan konvensi yang digunakan untuk file CSV untuk dibaca oleh spreadsheet.\r\r\rSelain menggunakan fungsi tersebut, untuk eksport ke dalam format CSV juga dapa menggunakan fungsi write.csv() atau write.csv2(). Berikut adalah format yang digunakan:\nwrite.csv(data, file=\u0026quot;data.csv\u0026quot;)\rwrite.csv2(data, file=\u0026quot;data.csv\u0026quot;)\rSecara penampakan kedua fungsi tersebut pada dasarnya sama dengan fungsi write.table(), bedanya adalah kedua fungsi tersebut spesifik digunakan untuk eksport file kedalam format CSV.\n\rNote: \n\rwrite.csv() menggunakan “.” sebagai titik desimal serta “,” sebagai pemisah antar kolom data.\rwrite.csv2() menggunakan “,” sebagai titik desimal serta “;” sebagai pemisah antar kolom data.\r\r\rMisalkan kita ingin melakukan eksport data objek mtcars kedalam format CSV. Untuk melakukannya dapat dilakukan dengan sintaks berikut:\nwrite.csv(mtcars, file=\u0026quot;mtcars.csv\u0026quot;, row.names = FALSE)\r\rNote:  Hasil ekspoet ditampilkan pada working directory\n\rKita juga dapat menggunakan fungsi write_delim() dari library readr untuk melakukan eksport data kedalam format CSV atau TXT. Berdasarkan format file yang hendak dihasilkan kita juga dapat menggunakan fungsi write_csv() atau write_tsv(). Berikut adalah penjelasan terkait kedua fungsi tersebut:\n\rwrite_csv(): untuk mengeksport kedalam format CSV.\rwrite_tsv(): untuk mengeksport kedalam format TXT.\r\rFormat sederhana ketiga fungsi fungsi tersebut adalah sebagai berikut:\n# Fungsi umum\rwrite_delim(x, path, delim = \u0026quot; \u0026quot;)\r# Write comma (\u0026quot;,\u0026quot;) separated value files\rwrite_csv(file, path)\r# Write tab (\u0026quot;\\t\u0026quot;) separated value files\rwrite_tsv(file, path)\r\rNote: \n\rx: data frame yang akan ditulis\rpath: path ke file hasil (dapat berupa nama file disertai ekstensi file yang akan dibuat)\rdelim: Delimiter digunakan untuk memisahkan nilai. Harus karakter tunggal.\r\r\rBerikut adalah contoh penerapan dari fungsi tersebut:\n# memuat mtcars data\rdata(mtcars)\rlibrary(readr)\r# eksport mtcars menjadi tsv atau txt\rwrite_tsv(mtcars, path = \u0026quot;mtcars.txt\u0026quot;)\r# eksport mycars menjadi csv\rwrite_csv(mtcars, path = \u0026quot;mtcars.csv\u0026quot;)\r\r3.2.2 Eksport Data Menjadi Format Excel\rUntuk mengeksport data menjadi format EXCEL (“.xls” atau “.xlsx”) kita dapat menggunakan fungsi write.xlsx() dan write.xlsx2() dari library xlsx. Berikut adalah format sederhana yanga digunakan:\nwrite.xlsx(x, file, sheetName = \u0026quot;Sheet1\u0026quot;, col.names = TRUE, row.names = TRUE, append = FALSE)\rwrite.xlsx2(x, file, sheetName = \u0026quot;Sheet1\u0026quot;,\rcol.names = TRUE, row.names = TRUE, append = FALSE)\r\rNote: \n\rx: sebuah data frame untuk ditulis ke dalam worksheet.\rfile: path ke file output.\rsheetName: string karakter yang digunakan untuk nama sheet.\rcol.names, row.names: nilai logik yang menentukan apakah nama kolom / nama baris x akan ditulis ke file.\rappend: nilai logis yang menunjukkan apakah x harus ditambahkan ke file yang ada.\r\r\rBerikut adalah contoh penerapannya:\nlibrary(\u0026quot;xlsx\u0026quot;)\r# Menuliskan dataset pertama pada workbook\rwrite.xlsx(USArrests, file = \u0026quot;myworkbook.xlsx\u0026quot;,\rsheetName = \u0026quot;USA-ARRESTS\u0026quot;, append = FALSE)\r# Menambahkan dataset kedua pada workbook\rwrite.xlsx(mtcars, file = \u0026quot;myworkbook.xlsx\u0026quot;, sheetName=\u0026quot;MTCARS\u0026quot;, append=TRUE)\r# Menambahkan dataset kedua pada workbook\rwrite.xlsx(iris, file = \u0026quot;myworkbook.xlsx\u0026quot;,\rsheetName=\u0026quot;IRIS\u0026quot;, append=TRUE)\r\r\r3.3 Tibble Data Format\rTibble adalah data frame yang menyediakan metode print yang lebih bagus, berguna saat bekerja dengan kumpulan data besar. Pada bagian ini penulis akan menjelaskan penggunaan tibble sebagai alternatif kita dalam berinteraksi dengan data frame.\nUntuk membuat tibble kita perlu menginstall dan memuat library tibble yang dikembangkan oleh Hadley Wichham. Berikut adalah sintaks yang digunakan:\n# menginstall paket\rinstall.packages(\u0026quot;tibble\u0026quot;)\r# memuat paket\rlibrary(tibble)\r3.3.1 Membuat Tibble\rUntuk dapat membuat tibble kita dapat melakukan konversi data frame yang sudah ada menjadi tibble menggunakan fungsi as_tibble(). Berikut adalah contoh bagaimana membuat tibble mengunakan data iris:\n# memuat data mtcars\rdata(\u0026quot;iris\u0026quot;)\r# print\rhead(iris, 10)\r## Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r## 1 5.1 3.5 1.4 0.2 setosa\r## 2 4.9 3.0 1.4 0.2 setosa\r## 3 4.7 3.2 1.3 0.2 setosa\r## 4 4.6 3.1 1.5 0.2 setosa\r## 5 5.0 3.6 1.4 0.2 setosa\r## 6 5.4 3.9 1.7 0.4 setosa\r## 7 4.6 3.4 1.4 0.3 setosa\r## 8 5.0 3.4 1.5 0.2 setosa\r## 9 4.4 2.9 1.4 0.2 setosa\r## 10 4.9 3.1 1.5 0.1 setosa\r# konversi mtcars menjadi tibble\riris_tbl \u0026lt;- as_tibble(iris)\r# print\riris_tbl\r## # A tibble: 150 x 5\r## Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # ... with 140 more rows\r\rNote:  Kita dapat mengkonversi tibble menjadi data frame menggunakan fungsi as.data.frame()\n\rSecara default saya kita print tibble, maka akan dimunculkan 10 observasi pertama. Pada data frame biasa jika kita print data tersebut maka seluruh observasi akan ditampilkan.\nPenggunaan tibble ini cenderung menguntungkan saat kita bekerja dengan jumlah data yang besar dan ingin mengecek observasi yang ada. Hal ini berbeda dengan data frame biasa dimana untuk mengecek observasi awal kita perlu menggunakan fungsi head() agar seluruh data tidak ditampilkan. Sehingga penggunaan tibble cenderung membuat proses analisa menjadi lebih rapi.\nKita juga dapat membuat tibble dari kumpulan sejumlah vektor menggunakan fungsi tibble(). tibble() akan secara otomatis mendaur ulang input dengan panjang 1 (variabel y), dan memungkinkan kita untuk merujuk ke variabel yang baru saja kita buat, seperti yang ditunjukkan pada sintaks berikut:\ntibble(\rx = 1:20,\ry = 1,\rz = 2*x+5*y\r)\r## # A tibble: 20 x 3\r## x y z\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 1 7\r## 2 2 1 9\r## 3 3 1 11\r## 4 4 1 13\r## 5 5 1 15\r## 6 6 1 17\r## 7 7 1 19\r## 8 8 1 21\r## 9 9 1 23\r## 10 10 1 25\r## 11 11 1 27\r## 12 12 1 29\r## 13 13 1 31\r## 14 14 1 33\r## 15 15 1 35\r## 16 16 1 37\r## 17 17 1 39\r## 18 18 1 41\r## 19 19 1 43\r## 20 20 1 45\rJika pembaca telah mulai familiar dengan fungsi data.frame(), perlu diingat bahwa tibble() melakukan lebih sedikit: tidak pernah mengubah jenis input (mis., tidak pernah mengubah string menjadi faktor!), tidak pernah mengubah nama variabel, dan tidak pernah membuat nama baris seperti yang biasa terjadi saat kita menggunakan fungsi data.frame().\nCara lain yang dapat digunakan untuk membuat tibble adalah dengan menggunakan fungsi tribble() yang merupakan singkatan dari transposed tibble. tribble() dikustomisasi untuk entri data dalam kode: judul kolom didefinisikan oleh rumus (yaitu, mereka mulai dengan ~), dan entri dipisahkan oleh koma. Hal ini memungkinkan untuk menata sejumlah kecil data dalam bentuk yang mudah dibaca. Berikut adalah contoh penerapannya:\ntribble(\r~x, ~y, ~z,\r#--/--/----\r\u0026quot;a\u0026quot;, 2, 5,\r\u0026quot;b\u0026quot;, 5, 7\r)\r## # A tibble: 2 x 3\r## x y z\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 a 2 5\r## 2 b 5 7\rPenambahahan komen (#–/–/—-) dilakukan untuk memperjelas posisi dari header sehingga meminimalisir kesalahan dalam input data.\n\r3.3.2 Tibble vs Data Frame\rterdapat dua buah perbedaan utama antara tibble dan data frame , yaitu: printing dan subsetting.\nPrinting\r\rTibbles memiliki metode print halus yang hanya menampilkan 10 baris pertama observasi, dan semua kolom yang sesuai dengan lebar layar. Ini membuatnya lebih mudah untuk bekerja dengan data besar. Selain namanya, setiap kolom melaporkan jenis datanya, fitur bagus yang dipinjam dari fungsi str(). Berikut adalah contohnya:\ntribble(\r~x, ~y, ~z,\r#--/---/--------\r\u0026quot;a\u0026quot;, 2.1, FALSE,\r\u0026quot;b\u0026quot;, 5.5, TRUE\r)\r## # A tibble: 2 x 3\r## x y z ## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;lgl\u0026gt;\r## 1 a 2.1 FALSE\r## 2 b 5.5 TRUE\rTibbles dirancang agar kita tidak secara sengaja menampilkan data yang sangat banyak saat melakukan perintah print(). Tetapi terkadang kita membutuhkan lebih banyak output daripada tampilan default. Ada beberapa opsi yang dapat membantu.\nPertama, kita dapat secara eksplisit melakukan print data frame dan mengontrol jumlah baris (n) dan lebar tampilan. width = Inf akan menampilkan semua kolom. Berikut adalah contoh penerapannya\nprint(iris_tbl, n=15, width=Inf)\r## # A tibble: 150 x 5\r## Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## 11 5.4 3.7 1.5 0.2 setosa ## 12 4.8 3.4 1.6 0.2 setosa ## 13 4.8 3 1.4 0.1 setosa ## 14 4.3 3 1.1 0.1 setosa ## 15 5.8 4 1.2 0.2 setosa ## # ... with 135 more rows\rKita juga dapat mengontrol print default dengan melakukan pengaturan menggunakan fungsi options(). Berikut adalah contoh penerapannya:\n\roptions(tibble.print_max= n, tibble.print_min= m): jika terdapat lebih dari “m” baris, print hanya sejumlah “n” baris.\roptions(dplyr.print_min = Inf): untuk selalu menampilkan seluruh baris. Perlu diingat fungsi ini dapat digunakan saat kita telah memuat library dplyr.\roptions(tibble.width = Inf): menampilkan seluruh kolom tanpa mempedulikan lebar tampilan layar.\r\rCara terakhir untuk menampilkan seluruh observasi adalh dengan fungsi view(). Berikut adalah contoh penerapannya pada data iris_tbl:\nview(iris_tbl)\rSubsetting\r\rSejauh ini semua alat yang kita pelajari telah bekerja dengan data frame yang lengkap. Jika kita ingin mengeluarkan variabel tunggal, kita memerlukan beberapa alat baru, dollar sign ($) dan [[. [[dapat mengekstraksi berdasarkan nama atau posisi; $ hanya mengekstraksi berdasarkan nama. Berikut adalah contoh penerapannya:\n# print tibble\riris_tbl\r## # A tibble: 150 x 5\r## Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # ... with 140 more rows\r# subset berdasarkan nama kolom\riris_tbl$Sepal.Length\r## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4\r## [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5\r## [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0\r## [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8\r## [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4\r## [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8\r## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7\r## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7\r## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9\r#subset berdasarkan posisi\riris_tbl[[1]]\r## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4\r## [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5\r## [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0\r## [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8\r## [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4\r## [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8\r## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7\r## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7\r## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9\rDibandingkan dengan data frame, tibble lebih ketat: tibble tidak pernah melakukan partial matching, dan mereka akan menghasilkan peringatan jika kolom yang kita coba akses tidak ada.\n\r\r3.4 Merapikan Data\rSebelum memulai analisa terhadap data yang kita miliki, umumnya kita akan merapikan data yang akan kita gunakan. Tujuannya adalah agar data yang akan digunakan sudah siap untuk dilakukan analisa dengan software tertentu seperti R, dimana pada dataset perlu jelas antara variabel dan nilai (value), serta untuk mempermudah dalah memperoleh informasi pada data. Berikut adalah beberapa contoh dataset yang dapat pembaca cermati terkait manakah data yang telah rapi (tidy data) dan mana yang belum (messy data):\n# Install paket dataset EDAWR\r# install.packages(\u0026quot;devtools\u0026quot;)\r# devtools::install_github(\u0026quot;rstudio/EDAWR\u0026quot;)\r# hilangkan tanda # jika pembaca belum menginstall\rlibrary(EDAWR)\r# memuat dataset\rstorms\r## storm wind pressure date\r## 1 Alberto 110 1007 2000-08-03\r## 2 Alex 45 1009 1998-07-27\r## 3 Allison 65 1005 1995-06-03\r## 4 Ana 40 1013 1997-06-30\r## 5 Arlene 50 1010 1999-06-11\r## 6 Arthur 45 1010 1996-06-17\rcases\r## country 2011 2012 2013\r## 1 FR 7000 6900 7000\r## 2 DE 5800 6000 6200\r## 3 US 15000 14000 13000\rpollution\r## city size amount\r## 1 New York large 23\r## 2 New York small 14\r## 3 London large 22\r## 4 London small 16\r## 5 Beijing large 121\r## 6 Beijing small 56\rSebelum kita melakukan analisa di dataset tersebut, kita harus tahu terlebih dahulu apa saja syarat suatu dataset dikatakan rapi (tidy). Berikut adalah syaratnya:\n\rSetiap variabel harus memiliki kolomnya sendiri\rSetiap observasi harus memiliki barisnya sendiri\rSetiap nilai berada pada sel tersendiri\r\rKetiga syarat tersebut saling berhubungan sehingga jika salah satu syarat tersebut tidak terpenuhi, maka dataset belum bisa dikatakan tidy. Ketiga syarat tersebut dapat divisualisasikan melalui Figure 1\n\rFigure 1: Visualisasi 3 rule tidy data\r\rPada dataset storms terdapat 4 buah kolom dan 6 buah baris. Masing-masing kolom menyatakan variabel pada masing-masing observasi seperti nama badai , kecepatan angin, tekanan dan waktu . Ketiga syarat kerapihan data sudah terpenuhi pada data tersebut sehingga kita bisa melakukan analisa terhadap data tersebut, misalnya kecepatan angin dan tekanan pada masing-masing badai. Selain itu kita juga dapat dengan mudah menginput variabel baru pada dataset tersebut, misal: rasio (kecepatan angin/tekanan).\nBerikut adalah contoh bagaimana kita dapat dengan mudah menarik nilai variabel pada masing-masing kolom dan membentuk variabel baru pada dataset tersebut:\n# subset variabel\rstorms$storm\r## [1] \u0026quot;Alberto\u0026quot; \u0026quot;Alex\u0026quot; \u0026quot;Allison\u0026quot; \u0026quot;Ana\u0026quot; \u0026quot;Arlene\u0026quot; \u0026quot;Arthur\u0026quot;\rstorms$wind\r## [1] 110 45 65 40 50 45\rstorms$pressure\r## [1] 1007 1009 1005 1013 1010 1010\rstorms$date\r## [1] \u0026quot;2000-08-03\u0026quot; \u0026quot;1998-07-27\u0026quot; \u0026quot;1995-06-03\u0026quot; \u0026quot;1997-06-30\u0026quot; \u0026quot;1999-06-11\u0026quot;\r## [6] \u0026quot;1996-06-17\u0026quot;\r# membuat variabel baru\rstorms_new \u0026lt;- storms\rstorms_new$ratio \u0026lt;- storms_new$wind/storms_new$pressure\rstorms_new\r## storm wind pressure date ratio\r## 1 Alberto 110 1007 2000-08-03 0.10923535\r## 2 Alex 45 1009 1998-07-27 0.04459861\r## 3 Allison 65 1005 1995-06-03 0.06467662\r## 4 Ana 40 1013 1997-06-30 0.03948667\r## 5 Arlene 50 1010 1999-06-11 0.04950495\r## 6 Arthur 45 1010 1996-06-17 0.04455446\rPada dataset cases terdapat 3 buah kolom dan 3 baris. Pada kolom pertama berupa kode Negara, sedangkan kolom sisanya merupakan tahun. Jika kita perhatikan dengan seksama dataset tersebut merupakan sebuah contingency table dimana tabel tersebut menyatakan frekuensi kejadian pada tahun tertentu dan negara tertentu. Dataset tersebut belum dapat dikatan tidy karena kolom 2011 sampai 2013 merupakan sebuah nilai dari observasi dan bukan sebuah variabel sehingga dataset tersebut masih tergolong dataset messy. Selain itu sangat sulit untuk dilakukan penarikan terhadap nilai pada setiap kolom serta pembentukan variabel baru sebagai pendukung analisa juga sulit dilakukan. Berikut adalah contoh melakukan penarikan nilai / subset pada masing variabel:\ncases$country\r## [1] \u0026quot;FR\u0026quot; \u0026quot;DE\u0026quot; \u0026quot;US\u0026quot;\rnames(cases[-1])\r## [1] \u0026quot;2011\u0026quot; \u0026quot;2012\u0026quot; \u0026quot;2013\u0026quot;\runlist(cases[1:3, 2:4])\r## 20111 20112 20113 20121 20122 20123 20131 20132 20133 ## 7000 5800 15000 6900 6000 14000 7000 6200 13000\rPada dataset pollutionterdapat 3 buah kolom dan 6 baris. Masing-masing kolom menyatakan lokasi berupa nama kota, keterangan ukuran partikel, serta nilai dari ukuran partikel. Beberapa dari kita mungkin menganggap dataset ini telah memenuhi syarat kerapihan data. Namun, coba kita cermati jika mita ingin membuat variabel baru terkait dengan berapa rentang ukuran partikel (range ukuran partikel) pada masing-masing kota. Hal tersebut tentu sangat sulit dilakukan pada dataset tersebut, namun dataset tersebut memungkinkan kita dengan mudah mengambil nilai dari masing-masing variabelnya seperti contoh berikut:\npollution$city\r## [1] \u0026quot;New York\u0026quot; \u0026quot;New York\u0026quot; \u0026quot;London\u0026quot; \u0026quot;London\u0026quot; \u0026quot;Beijing\u0026quot; \u0026quot;Beijing\u0026quot;\rpollution$size\r## [1] \u0026quot;large\u0026quot; \u0026quot;small\u0026quot; \u0026quot;large\u0026quot; \u0026quot;small\u0026quot; \u0026quot;large\u0026quot; \u0026quot;small\u0026quot;\rpollution$amount\r## [1] 23 14 22 16 121 56\rBerdasarkan contoh-contoh tersebut pada pembahasan kali ini penulis akan menjelaskan bagaiman cara melakukan perapihan data menggunakan library tidyr. Sebelum kita melakukannya berikut adalah sintaks untuk menginstall library tersebut:\n# memasang paket\rinstall.packages(\u0026quot;tidyr\u0026quot;)\r# memuat paket\rlibrary(tidyr)\r## Warning: package \u0026#39;tidyr\u0026#39; was built under R version 3.5.3\r3.4.1 Gather\rPada dataset cases kolom 2011 sampai 2013 perlu dijadikan satu variabel yaitu tahun. untuk melakukannya kita dapat menggunakan fungsi gather(). Secara sederhana fungsi tersebut dapat dituliskan dengan format sebagai berikut:\ngather(data, key, value, ...)\r\rNote: \n\rdata: data frame\rkey, value: nama kunci dan kolom nilai yang akan dibuat di output\r…: Spesifikasi kolom untuk dikumpulkan. Nilai yang diizinkan adalah:\r\rnama variabel\rjika kita ingin memilih semua variabel antara a dan e, gunakan a:e\rjika kita ingin mengecualikan nama kolom y gunakan -y\runtuk opsi lainnya, lihat: dplyr::select()\r\r\r\rBerikut adalah contoh penerapannya pada dataset cases:\n# Ubah dataset cases menjadi tibble simpan sebagai objek cases_new\rlibrary(tibble)\rcases_tbl \u0026lt;- as_tibble(cases)\r# print\rcases_tbl\r## # A tibble: 3 x 4\r## country `2011` `2012` `2013`\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 FR 7000 6900 7000\r## 2 DE 5800 6000 6200\r## 3 US 15000 14000 13000\r# gather\rcases_new \u0026lt;- gather(cases_tbl, # variabel kunci\rkey = \u0026quot;year\u0026quot;,\r# nilai variabel\rvalue = \u0026quot;frequency\u0026quot;,\r# kecualikan kolom country\r-country)\r# print\rcases_new\r## # A tibble: 9 x 3\r## country year frequency\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 FR 2011 7000\r## 2 DE 2011 5800\r## 3 US 2011 15000\r## 4 FR 2012 6900\r## 5 DE 2012 6000\r## 6 US 2012 14000\r## 7 FR 2013 7000\r## 8 DE 2013 6200\r## 9 US 2013 13000\rBerdasarkan hasil yang diperoleh terlihat bahwa variabel tahun memiliki jenis data karakter. Jenis data ini masih belum sesuai sehingga perlu dikonversi agar menjadi jenis data numerik (dbl = double). Untuk melakukannya jalankan sintaks berikut:\n# Ubah jenis variabel tahun menjadi numerik\rcases_new$year \u0026lt;- as.numeric(cases_new$year)\rcases_new\r## # A tibble: 9 x 3\r## country year frequency\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 FR 2011 7000\r## 2 DE 2011 5800\r## 3 US 2011 15000\r## 4 FR 2012 6900\r## 5 DE 2012 6000\r## 6 US 2012 14000\r## 7 FR 2013 7000\r## 8 DE 2013 6200\r## 9 US 2013 13000\rData yang diperoleh sekaran telah rapi (tidy), sehingga sudah siap untuk dilakukan analisa data.\n\r3.4.2 Spread\rFungsi spread() berkebalikan dengan gather(). Fungsi gather() menggabungkan beberapa kolom menjadi 2 buah kolom kolom kunci sedangkan spread() merubah dua kolom menjadi beberapa kolom. Format sederhanya adalah sebagai berikut:\n\rNote: \n\rdata: data frame\rkey: nama kolom yang akan dijadikan heading pada kolom baru\rvalue: nama kolom yang nilainya akan mengisi setiap sel\r\r\rPada contoh kasus pada data pollution, kita dapat memisahkan kolom 2 menjadi kolom baru yaitu kolom big size dan small size. Untuk melakukannya jalankan sintaks berikut:\n# merubah objek pollution menjadi tibble\rpollution_tbl \u0026lt;- as_tibble(pollution)\r# print\rpollution_tbl\r## # A tibble: 6 x 3\r## city size amount\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 New York large 23\r## 2 New York small 14\r## 3 London large 22\r## 4 London small 16\r## 5 Beijing large 121\r## 6 Beijing small 56\r# spread\rpollution_new \u0026lt;- spread(pollution_tbl,\rkey = size,\rvalue = amount)\r#print\rpollution_new\r## # A tibble: 3 x 3\r## city large small\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Beijing 121 56\r## 2 London 22 16\r## 3 New York 23 14\rTerlihat bahwa data pollution tampak memnuhi syarat kerapihan data (tidy). Kita sekarang dapat menginput variabel baru dan melakukan analisa terhadap data tersebut. Berikut adalah contoh penerapannya:\n# input variabel range (large-small)\rpollution_new$range \u0026lt;- pollution_new$large - pollution_new$small\r# print\rpollution_new\r## # A tibble: 3 x 4\r## city large small range\r## \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Beijing 121 56 65\r## 2 London 22 16 6\r## 3 New York 23 14 9\rBerdasarkan hasil yang diperoleh diketahui bahwa nilai range ukuran partikel terbesar berada di Kota Beijing.\n\r3.4.3 Separate\rFungsi separate() merupakan fungsi yang digunakan untuk memisahkan sejumlah nilai pada sebuah kolom menjadi beberapa kolom berdasarkan karakter pemisah yang ada di dalam nilai suatu kolom. Fungsi ini berbeda dengan fungsi sebelumnya seperti gather() dan spread() yang menggabung atau memisahkan 2 atau beberapa kolom. Format sederhana fungsi separate() adalah sebagai berikut:\nseparate(data, col, into, sep = \u0026quot;[^[:alnum:]]+\u0026quot;, convert= TRUE)\r\rNote: \n\rdata: data frame.\rcol: Nama kolom yang tidak dikutip.\rinto: Vektor karakter menentukan nama variabel baru yang akan dibuat.\rsep: Pemisah antar kolom:\rJika karakter, diartikan sebagai ekspresi reguler. Jika numerik, diartikan sebagai posisi untuk dibelah. Nilai-nilai positif mulai dari 1 di ujung kiri string; nilai negatif mulai dari -1 di ujung kanan string.\rconvert: nilai logik. Jika bernilai TRUE maka kolom baru yang akan diperoleh akan dikonversi berdasarkan jenis data yang seharusnya.\r\r\rPada dataset storms kita ingin memisahkan kolom date menjadi beberapa kolom seperti year, month, dan day, Kita dapat menggunakan fungsi separate() untuk memisahkan nilai pada kolom tersebut berdasarkan karakter pemisah pada nilai kolom tersebut dalam hal ini adalah “-”. Berikut adalah cara melakukannya:\n# merubah storms menjadi tibble\rstorms_tbl \u0026lt;- as_tibble(storms)\r# print\rstorms_tbl\r## # A tibble: 6 x 4\r## storm wind pressure date ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;date\u0026gt; ## 1 Alberto 110 1007 2000-08-03\r## 2 Alex 45 1009 1998-07-27\r## 3 Allison 65 1005 1995-06-03\r## 4 Ana 40 1013 1997-06-30\r## 5 Arlene 50 1010 1999-06-11\r## 6 Arthur 45 1010 1996-06-17\r# separate\rstorms_new \u0026lt;- separate(storms_tbl,\rcol = date,\rinto = c(\u0026quot;year\u0026quot;,\u0026quot;month\u0026quot;,\u0026quot;days\u0026quot;),\rsep = \u0026quot;-\u0026quot;,\rconvert = TRUE)\r# print\rstorms_new\r## # A tibble: 6 x 6\r## storm wind pressure year month days\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 Alberto 110 1007 2000 8 3\r## 2 Alex 45 1009 1998 7 27\r## 3 Allison 65 1005 1995 6 3\r## 4 Ana 40 1013 1997 6 30\r## 5 Arlene 50 1010 1999 6 11\r## 6 Arthur 45 1010 1996 6 17\rBerdasarkan hasil yang diperoleh terlihat bahwa data telah terpisah dengan benar yang ditunjukkan dari nilai yang terpisah dan jenis data yang dihasilkan.\n\r3.4.4 Unite\rFungsi unite() merupakan kebalikan dari fungsi separate(), dimana fungsi ini menggabungkan sejumlah kolom menjadi 1 kolom. Format sederhana untuk melakukanya disajikan sebagai berikut:\nunite(data, col, ..., sep = \u0026quot;_\u0026quot;)\r\rNote: \n\rdata: data frame.\rcol: nama kolom baru (tanpa tanda kutip) untuk ditambahkan.\rsep: pemisah yang akan digunakan pada antar nilai.\r\r\rPada dataset storms_new kita ingin menggabungkan kembali kolom year, month, dan days dengan karakter pemisah “/”. Berikut adalah cara melakukannya:\n# unite\rstorms_old \u0026lt;- unite(storms_new,\rcol = \u0026quot;date\u0026quot;,\ryear, month, days,\rsep = \u0026quot;-\u0026quot;)\r# print\rstorms_old\r## # A tibble: 6 x 4\r## storm wind pressure date ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; ## 1 Alberto 110 1007 2000-8-3 ## 2 Alex 45 1009 1998-7-27\r## 3 Allison 65 1005 1995-6-3 ## 4 Ana 40 1013 1997-6-30\r## 5 Arlene 50 1010 1999-6-11\r## 6 Arthur 45 1010 1996-6-17\r# ubah jenis kolom menjadi date\rstorms_old$date \u0026lt;- as.Date(storms_old$date)\r# print\rstorms_old\r## # A tibble: 6 x 4\r## storm wind pressure date ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;date\u0026gt; ## 1 Alberto 110 1007 2000-08-03\r## 2 Alex 45 1009 1998-07-27\r## 3 Allison 65 1005 1995-06-03\r## 4 Ana 40 1013 1997-06-30\r## 5 Arlene 50 1010 1999-06-11\r## 6 Arthur 45 1010 1996-06-17\r\r\r3.5 Transformasi Data\rData frame merupakan struktur data utama dalam statistik dan dalam R. Struktur dasar data frame ialah ada satu observasi tiap baris dan setiap kolom mewakili variabel, ukuran, fitur, atau karakteristik pengamatan itu yang telah dijelaskan pada bagian sebelumya. R memiliki implementasi internal data frame yang kemungkinan besar akan kita gunakan paling sering. Namun, ada paket di CRAN yang mengimplementasikan data frame layaknya basis data relasional yang memungkinkan kita untuk beroperasi pada data frame yang sangat besar.\nMengingat pentingnya mengelola dat frame, penting bagi kita untuk memiliki alat yang baik untuk melakukannya. R memiliki beberapa paket seperti fungsi subset() dan penggunaan operator “[” dan “$” untuk mengekstrak himpunan bagian dari frame data. Namun, operasi lain, seperti pemfilteran, pengurutan, dan pengelompokan data, seringkali dapat menjadi operasi yang membosankan di R yang sintaksisnya tidak terlalu intuitif. Paket dplyr dirancang untuk mengurangi banyak masalah ini dan menyediakan serangkaian rutinitas yang dioptimalkan secara khusus untuk menangani data frame.\n3.5.1 Paket dplyr\rPaket dplyr dikembangkan oleh Hadley Wickham dari RStudio dan merupakan versi yang dioptimalkan dari paket plyr-nya. Paket dplyr tidak menyediakan fungsionalitas baru untuk R sendiri, dalam arti bahwa semua yang dilakukan dplyr sudah dapat dilakukan dengan fungsi basis R, tetapi sangat menyederhanakan fungsi yang ada di R.\nSalah satu kontribusi penting dari paket dplyr adalah ia menyediakan “grammar” (khususnya, kata kerja) untuk manipulasi data dan untuk beroperasi pada data frame. Melalui grammar ini, kita dapat berkomunikasi dengan masuk akal apa yang telah kita lakukan terhadap data frame dapat pula dipahami orang lain (dengan asumsi mereka juga tahu grammar-nya). Hal ini berguna karena memberikan abstraksi untuk manipulasi data yang sebelumnya tidak ada. Kontribusi lain yang bermanfaat adalah bahwa fungsi dplyr sangat cepat, karena banyak operasi utama dikodekan dalam C++.\nPada bagian ini pembaca akan belajar 6 fungsi utama yang ada pada paket dplyr. Fungsi tersebut antara lain:\nMengambil sejumlah observasi berdasarkan nilainya (filter()).\rMengurutkan kembali baris data frame berdasarkan nilai pada sebuah atau beberapa variabel (arrange()).\rMengambil atau subset terhadap sebuah atau beberapa variabel berdasarkan nama variabel/kolom (select()).\rMembuat variabel baru atau menambahkan kolom baru (mutate()).\rMembuat ringkasan terhadap data frame (summarize())\rMengelompokkan operasi berdasarkan grup data (group_by()).\r\rKeseluruhan fungsi tersebut format fungsi yang seragam, yaitu:\nArgumen pertama adalah data frame.\rArgumen selanjutnya adalah deskripsi yang akan dilakukan terhadap data frame (filter, pengurutan kembali, membuat ringkasan, dll) menggunakan nama variabel (tanpa tanda kutip).\rHasil operasi yang diperoleh adalah data frame baru.\r\rUntuk menginstall dan memuat paket dplyr jalankan sintaks berikut:\n# Memasang paket\rinstall.packages(\u0026quot;dplyr\u0026quot;)\r# memuat paket\rlibrary(dplyr)\r\r3.5.2 filter()\rFungsi filter() digunakan untuk mengekstrak himpunan bagian (subset) baris dari data frame. Fungsi ini mirip dengan fungsi subset() yang ada di R. Secara sederhana format fungsi filter() dapat dituliskan sebagai berikut:\nfilter(data, ....)\r\rNote: \n\rdata : data frame\r…. : Predikat logis didefinisikan dalam istilah variabel dalam data. Beberapa kondisi digabungkan dengan \u0026amp; (lihat Chapter 2 opeator relasi dan operator logika. Hanya baris tempat kondisi bernilai TRUE disimpan.\r\r\rMisalkan kita akan melakukan melakukan filter terhadap data frame pollution_tbl terhadap variabel size dengan kriteria large dan amount \u0026gt; 12. Berikut adalah sintaks yang digunakan:\nfilter(pollution_tbl, size==\u0026quot;large\u0026quot; \u0026amp; amount \u0026gt; 12)\r## # A tibble: 3 x 3\r## city size amount\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 New York large 23\r## 2 London large 22\r## 3 Beijing large 121\rJika menggunakan paket dasar R:\nsubset(pollution_tbl,size==\u0026quot;large\u0026quot; \u0026amp; amount \u0026gt; 12)\r## # A tibble: 3 x 3\r## city size amount\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 New York large 23\r## 2 London large 22\r## 3 Beijing large 121\rOperator “\u0026gt;” merupakan operator relasi (lihat chapter 2: operator relasi). Operator tersebut banyak digunakan untuk melakukan filter terhadap variabel/kolom yang mengandung nilai numerik.\nOperator “==” merupakan operator logika (lihat chapter 2: operator logika). Operator tersebut digunakan untuk melakukan filter terhadap sejumlah syarat atau kondisi yang kita tetapkan. Jika nilai yang dihasilkan TRUE, maka hanya observasi tersebut yang akan ditampilkan. Untuk lebih memahami penerapan masing-masing operator logika pada proses filter perhatikan Figure 2 berikut:\n\rFigure 2: Diagram operasi Boolean\r\r\rNote:  Bagian yang di arsir adalah observasi yang akan ditampilkan pada output.\n\rSalah satu bagian terpenting dan paling sering penulis gunakan pada fungsi ini memfilter missing value (melihat observasi yang mengandung missing value atau tidak melibatkan missing value). Berikut adalah contoh filter terhadap data pada pollution_tbl yang tidak mengandung missing value dan nilai amount\u0026gt;0.\nfilter(pollution_tbl,!(is.na(amount)|amount\u0026lt;=0))\r## # A tibble: 6 x 3\r## city size amount\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 New York large 23\r## 2 New York small 14\r## 3 London large 22\r## 4 London small 16\r## 5 Beijing large 121\r## 6 Beijing small 56\rBerdasarkan hasil yang diperoleh seluruh data tidak ada yang di drop sehingga dapat disimpulkan bahwa data tersebut tidak mengandung missing value dan nol.\n\r3.5.3 arrange()\rFungsi arrange() bekerja mirip dengan fungsi filter() kecuali bahwa alih-alih memilih baris, fungsi ini mengubah urutan observasinya (mengurutkan dari yang terbesar atau sebaliknya). Dibutuhkan data frame dan sekumpulan nama kolom (atau ekspresi yang lebih rumit) untuk dipesan. Jika kita memberikan lebih dari satu nama kolom pada fungsi, setiap kolom tambahan akan digunakan untuk menentukan urutan nilai yang sama berdasarkan nilai kolom sebelumnya.\nFungsi arrange() mirip dengan fungsi order() pada paket dasar R. Format sederhana fungsi ini adalah sebagai berikut:\narrange(data, ....)\r\rNote: \n\rdata : data frame\r…. : daftar nama variabel yang tidak dikutip yang dipisahkan tanda koma, atau ekspresi yang melibatkan nama variabel. Gunakan desc() untuk mengurutkan variabel dalam urutan menurun.\r\r\rMisalkan kita ingin melihat urutan mobil pada data mtcars berdasarkan penggunaan bahan bakar (mpg) dan bobot mobil (wt) tersebut. Berikut adalah sintaks yang digunakan:\ndata(\u0026quot;mtcars\u0026quot;)\r# Ubah mtcars menjadi tibble\rmtcars\u0026lt;- as_tibble(mtcars)\rarrange(mtcars, mpg, wt)\r## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 10.4 8 472 205 2.93 5.25 18.0 0 0 3 4\r## 2 10.4 8 460 215 3 5.42 17.8 0 0 3 4\r## 3 13.3 8 350 245 3.73 3.84 15.4 0 0 3 4\r## 4 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4\r## 5 14.7 8 440 230 3.23 5.34 17.4 0 0 3 4\r## 6 15 8 301 335 3.54 3.57 14.6 0 1 5 8\r## 7 15.2 8 304 150 3.15 3.44 17.3 0 0 3 2\r## 8 15.2 8 276. 180 3.07 3.78 18 0 0 3 3\r## 9 15.5 8 318 150 2.76 3.52 16.9 0 0 3 2\r## 10 15.8 8 351 264 4.22 3.17 14.5 0 1 5 4\r## # ... with 22 more rows\rJika ingin urutan yang digunakan adalah dari yang terbesar ke terkecil untuk kedua variabel tersebut jalankan sintaks berikut:\narrange(mtcars, desc(mpg), desc(wt))\r## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 33.9 4 71.1 65 4.22 1.84 19.9 1 1 4 1\r## 2 32.4 4 78.7 66 4.08 2.2 19.5 1 1 4 1\r## 3 30.4 4 75.7 52 4.93 1.62 18.5 1 1 4 2\r## 4 30.4 4 95.1 113 3.77 1.51 16.9 1 1 5 2\r## 5 27.3 4 79 66 4.08 1.94 18.9 1 1 4 1\r## 6 26 4 120. 91 4.43 2.14 16.7 0 1 5 2\r## 7 24.4 4 147. 62 3.69 3.19 20 1 0 4 2\r## 8 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2\r## 9 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1\r## 10 21.5 4 120. 97 3.7 2.46 20.0 1 0 3 1\r## # ... with 22 more rows\rJika menggunakan fungsi order():\nattach(mtcars)\r# urutan dari kecil ke besar\rmtcars[order(mpg, wt), ]\r## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 10.4 8 472 205 2.93 5.25 18.0 0 0 3 4\r## 2 10.4 8 460 215 3 5.42 17.8 0 0 3 4\r## 3 13.3 8 350 245 3.73 3.84 15.4 0 0 3 4\r## 4 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4\r## 5 14.7 8 440 230 3.23 5.34 17.4 0 0 3 4\r## 6 15 8 301 335 3.54 3.57 14.6 0 1 5 8\r## 7 15.2 8 304 150 3.15 3.44 17.3 0 0 3 2\r## 8 15.2 8 276. 180 3.07 3.78 18 0 0 3 3\r## 9 15.5 8 318 150 2.76 3.52 16.9 0 0 3 2\r## 10 15.8 8 351 264 4.22 3.17 14.5 0 1 5 4\r## # ... with 22 more rows\r# urutan dari besar ke kecil\rmtcars[order(-mpg, -wt), ]\r## # A tibble: 32 x 11\r## mpg cyl disp hp drat wt qsec vs am gear carb\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 33.9 4 71.1 65 4.22 1.84 19.9 1 1 4 1\r## 2 32.4 4 78.7 66 4.08 2.2 19.5 1 1 4 1\r## 3 30.4 4 75.7 52 4.93 1.62 18.5 1 1 4 2\r## 4 30.4 4 95.1 113 3.77 1.51 16.9 1 1 5 2\r## 5 27.3 4 79 66 4.08 1.94 18.9 1 1 4 1\r## 6 26 4 120. 91 4.43 2.14 16.7 0 1 5 2\r## 7 24.4 4 147. 62 3.69 3.19 20 1 0 4 2\r## 8 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2\r## 9 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1\r## 10 21.5 4 120. 97 3.7 2.46 20.0 1 0 3 1\r## # ... with 22 more rows\r\rNote:  missing value akan selalu diurutkan pada observasi terakhir baik menggunakan urutan dari terbesar ke terkecil maupun sebaliknya.\n\r\r3.5.4 select()\rFungsi select() dapat digunakan untuk memilih kolom dari data frame yang ingin kita fokuskan. Seringkali kita memiliki data frame yang besar yang berisi semua data, tetapi setiap analisis yang diberikan hanya menggunakan subset variabel atau pengamatan. Fungsi select() memungkinkan kita untuk mendapatkan beberapa kolom yang mungkin kita butuhkan.\nFungsi select() memiliki kesamaan dengan subset menggunakan tanda “[” dan “$”. Perbedaanya adalah kita dapat melakukan hal lebih melalui fungsi ini seperti memilih berdasarkan kriteria tertentu menggunakan fungsi bantuan sebagai berikut:\nstarts_with(\u0026quot;abcd\u0026quot;), pilih kolom yang memiliki awalan “abcd”.\rend_with(\u0026quot;abcd\u0026quot;), pilih kolom yang memiliki akhiran “abcd”.\rcontains(\u0026quot;abcd\u0026quot;), pilih kolom yang mengandung nama “abcd”\rmatches(\u0026quot;(.)\\\\1\u0026quot;), pilih variabel yang mengandung regular expression. Fungsi ini memilih variabel yang mengandung perulangan karakter.\rnum_range(\u0026quot;x\u0026quot;, 1:3), cocokkan berdasarkan kolom dengan nama x1,x2,x3.\r\rBerdasarkan fungsi bantuan tersebut, fungsi select() lebih powerfull dibandingkan dengan cara subset biasa serta lebih mudah dalam melakukannya. Berikut adalah format dari fungsi select():\nselect(data, ....)\r\rNote: \n\rdata : data frame\r…. : Satu atau lebih ekspresi kutip yang dipisahkan oleh koma. kita dapat memperlakukan nama variabel seperti posisi, sehingga kita dapat menggunakan ekspresi seperti x: y untuk memilih rentang variabel.Nilai positif pilih variabel; nilai negatif drop variabel. Jika ekspresi pertama negatif, select() akan secara otomatis dimulai dengan semua variabel. Gunakan argumen bernama, mis. new_name = old_name, untuk mengganti nama variabel yang dipilih.\r\r\rBerikut adalah contoh penerapan selct() pada data frame flights.\n# memasang paket\r# install.packages(\u0026quot;nycflights13\u0026quot;)\r# memuat data frame\rlibrary(nycflights13)\r## Warning: package \u0026#39;nycflights13\u0026#39; was built under R version 3.5.3\r# data\rflights\r## # A tibble: 336,776 x 19\r## year month day dep_time sched_dep_time dep_delay arr_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1 517 515 2 830\r## 2 2013 1 1 533 529 4 850\r## 3 2013 1 1 542 540 2 923\r## 4 2013 1 1 544 545 -1 1004\r## 5 2013 1 1 554 600 -6 812\r## 6 2013 1 1 554 558 -4 740\r## 7 2013 1 1 555 600 -5 913\r## 8 2013 1 1 557 600 -3 709\r## 9 2013 1 1 557 600 -3 838\r## 10 2013 1 1 558 600 -2 753\r## # ... with 336,766 more rows, and 12 more variables: sched_arr_time \u0026lt;int\u0026gt;,\r## # arr_delay \u0026lt;dbl\u0026gt;, carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;,\r## # origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, air_time \u0026lt;dbl\u0026gt;, distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;,\r## # minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r# pilih kolom berdasarkan nama kolom\rselect(flights, year, month, day)\r## # A tibble: 336,776 x 3\r## year month day\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1\r## 2 2013 1 1\r## 3 2013 1 1\r## 4 2013 1 1\r## 5 2013 1 1\r## 6 2013 1 1\r## 7 2013 1 1\r## 8 2013 1 1\r## 9 2013 1 1\r## 10 2013 1 1\r## # ... with 336,766 more rows\r# pilih seluruh kolom dari year sampai day\rselect(flights, year:day)\r## # A tibble: 336,776 x 3\r## year month day\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 2013 1 1\r## 2 2013 1 1\r## 3 2013 1 1\r## 4 2013 1 1\r## 5 2013 1 1\r## 6 2013 1 1\r## 7 2013 1 1\r## 8 2013 1 1\r## 9 2013 1 1\r## 10 2013 1 1\r## # ... with 336,766 more rows\r# drop kolom dari year sampai day\rselect(flights, -(year:day))\r## # A tibble: 336,776 x 16\r## dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 515 2 830 819 11\r## 2 533 529 4 850 830 20\r## 3 542 540 2 923 850 33\r## 4 544 545 -1 1004 1022 -18\r## 5 554 600 -6 812 837 -25\r## 6 554 558 -4 740 728 12\r## 7 555 600 -5 913 854 19\r## 8 557 600 -3 709 723 -14\r## 9 557 600 -3 838 846 -8\r## 10 558 600 -2 753 745 8\r## # ... with 336,766 more rows, and 10 more variables: carrier \u0026lt;chr\u0026gt;,\r## # flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;, air_time \u0026lt;dbl\u0026gt;,\r## # distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;, time_hour \u0026lt;dttm\u0026gt;\r# pilih kolom dengan akhiran time\rselect(flights, ends_with(\u0026quot;time\u0026quot;))\r## # A tibble: 336,776 x 5\r## dep_time sched_dep_time arr_time sched_arr_time air_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 515 830 819 227\r## 2 533 529 850 830 227\r## 3 542 540 923 850 160\r## 4 544 545 1004 1022 183\r## 5 554 600 812 837 116\r## 6 554 558 740 728 150\r## 7 555 600 913 854 158\r## 8 557 600 709 723 53\r## 9 557 600 838 846 140\r## 10 558 600 753 745 138\r## # ... with 336,766 more rows\r# pilih kolom yang mengandung karakter \u0026quot;arr\u0026quot;\rselect(flights, contains(\u0026quot;arr\u0026quot;))\r## # A tibble: 336,776 x 4\r## arr_time sched_arr_time arr_delay carrier\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; ## 1 830 819 11 UA ## 2 850 830 20 UA ## 3 923 850 33 AA ## 4 1004 1022 -18 B6 ## 5 812 837 -25 DL ## 6 740 728 12 UA ## 7 913 854 19 B6 ## 8 709 723 -14 EV ## 9 838 846 -8 B6 ## 10 753 745 8 AA ## # ... with 336,766 more rows\rKita juga dapat menggunakan fungsi tambahan everithing() yang berguna jika kita ingin memindahkan variabel yang menjadi fokus kita ke awal data frame tanpa melakukan drop variabel. Berikut adalah contoh sintaksnya:\n# pindahkan kolom yang mengandung time di awal\rselect(flights, contains(\u0026quot;time\u0026quot;), everything())\r## # A tibble: 336,776 x 19\r## dep_time sched_dep_time arr_time sched_arr_time air_time\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 515 830 819 227\r## 2 533 529 850 830 227\r## 3 542 540 923 850 160\r## 4 544 545 1004 1022 183\r## 5 554 600 812 837 116\r## 6 554 558 740 728 150\r## 7 555 600 913 854 158\r## 8 557 600 709 723 53\r## 9 557 600 838 846 140\r## 10 558 600 753 745 138\r## # ... with 336,766 more rows, and 14 more variables: time_hour \u0026lt;dttm\u0026gt;,\r## # year \u0026lt;int\u0026gt;, month \u0026lt;int\u0026gt;, day \u0026lt;int\u0026gt;, dep_delay \u0026lt;dbl\u0026gt;, arr_delay \u0026lt;dbl\u0026gt;,\r## # carrier \u0026lt;chr\u0026gt;, flight \u0026lt;int\u0026gt;, tailnum \u0026lt;chr\u0026gt;, origin \u0026lt;chr\u0026gt;, dest \u0026lt;chr\u0026gt;,\r## # distance \u0026lt;dbl\u0026gt;, hour \u0026lt;dbl\u0026gt;, minute \u0026lt;dbl\u0026gt;\r\r3.5.5 mutate()\rFungsi mutate() ada untuk menghitung transformasi variabel dalam data frame. Seringkali, kita ingin membuat variabel baru yang berasal dari variabel yang ada dan fungsi mutate() menyediakan antarmuka yang bersih untuk melakukan itu. Format yang digunakan adalah sebagai berikut:\nmutate(data, ....)\r\rNote: \n\rdata : data frame\r…. : Pasangan nama-nilai ekspresi, masing-masing dengan panjang 1 atau panjang yang sama dengan jumlah baris dalam grup (jika menggunakan group_by ()) atau di seluruh input (jika tidak menggunakan grup). Nama setiap argumen akan menjadi nama variabel baru, dan nilainya akan menjadi nilai yang sesuai. Gunakan nilai NULL dalam mutasi untuk menjatuhkan drop variabel lama, sehingga variabel baru menimpa variabel yang ada dengan nama yang sama.\r\r\r# subset data frame\rflights_sml \u0026lt;- select(flights,\ryear:day,\rends_with(\u0026quot;delay\u0026quot;),\rdistance,\rair_time\r)\r# mutate()\rmutate(flights_sml,\rgain = arr_delay - dep_delay,\rhours = air_time / 60,\rgain_per_hour = gain / hours\r)\r## # A tibble: 336,776 x 10\r## year month day dep_delay arr_delay distance air_time gain hours\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 2 11 1400 227 9 3.78 ## 2 2013 1 1 4 20 1416 227 16 3.78 ## 3 2013 1 1 2 33 1089 160 31 2.67 ## 4 2013 1 1 -1 -18 1576 183 -17 3.05 ## 5 2013 1 1 -6 -25 762 116 -19 1.93 ## 6 2013 1 1 -4 12 719 150 16 2.5 ## 7 2013 1 1 -5 19 1065 158 24 2.63 ## 8 2013 1 1 -3 -14 229 53 -11 0.883\r## 9 2013 1 1 -3 -8 944 140 -5 2.33 ## 10 2013 1 1 -2 8 733 138 10 2.3 ## # ... with 336,766 more rows, and 1 more variable: gain_per_hour \u0026lt;dbl\u0026gt;\rJika hanya ingin menyisakan variabel output fungsi mutate() pada data frame (variabel lain di drop), kita dapat menggunakan fungsi transmute(). Berikut adalah contoh sintaks yang digunakan:\ntransmute(flights,\rgain = arr_delay - dep_delay,\rhours = air_time / 60,\rgain_per_hour = gain / hours\r)\r## # A tibble: 336,776 x 3\r## gain hours gain_per_hour\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 9 3.78 2.38\r## 2 16 3.78 4.23\r## 3 31 2.67 11.6 ## 4 -17 3.05 -5.57\r## 5 -19 1.93 -9.83\r## 6 16 2.5 6.4 ## 7 24 2.63 9.11\r## 8 -11 0.883 -12.5 ## 9 -5 2.33 -2.14\r## 10 10 2.3 4.35\r## # ... with 336,766 more rows\rAdapaun fungsi-fungsi dan operator yang dapat digunakan pada mutate() untuk membuat variabel baru adalah sebagai berikut:\nOperator aritmatik (+,-,*,/,^, %/%, %%). operator aritmetik seperti %/% dan %% sangat berguna dalam memecah integer menjadi beberapa bagian seperti hasil bagi tanpa sisa (%/%) dan sisa hasil bagi (%%). Berikut adalah contoh penerapannya:\r\rtransmute(flights,\rdep_time,\rhour = dep_time %/% 100,\rminute = dep_time %% 100\r)\r## # A tibble: 336,776 x 3\r## dep_time hour minute\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 517 5 17\r## 2 533 5 33\r## 3 542 5 42\r## 4 544 5 44\r## 5 554 5 54\r## 6 554 5 54\r## 7 555 5 55\r## 8 557 5 57\r## 9 557 5 57\r## 10 558 5 58\r## # ... with 336,766 more rows\rFungsi aritmetik (log(),sin(),cos(),dll)\rFungsi Offsets (lead()dan lag()). memungkinkan kita untuk merujuk pada nilai-nilai memimpin atau tertinggal. Berikut adalah contoh penerapannya:\r\r(x \u0026lt;- 1:10)\r## [1] 1 2 3 4 5 6 7 8 9 10\rlag(x)\r## [1] NA 1 2 3 4 5 6 7 8 9\rlead(x)\r## [1] 2 3 4 5 6 7 8 9 10 NA\rFungsi kumulatif (cumsum(),cumprod(),cummin(),cummax(), dan cummean()). Jika kita membutuhkan agregat bergulir (mis., Jumlah yang dihitung di atas jendela bergulir). Berikut adalah contoh penerapannya:\r\rx\r## [1] 1 2 3 4 5 6 7 8 9 10\rcumsum(x)\r## [1] 1 3 6 10 15 21 28 36 45 55\rcummean(x)\r## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5\rOperator logik (\u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;=, !=). Jika kita melakukan urutan operasi logis yang kompleks, seringkali ide yang baik untuk menyimpan nilai sementara dalam variabel baru sehingga kita dapat memeriksa bahwa setiap langkah berfungsi seperti yang diharapkan.\n\rRangking (min_rank(), row_number(), dense_rank(), percent_rank(), cume_dist()dan ntile()).\n\r\r\r3.5.6 summarize() dan group_by()\rKita dapat membuat ringkasan data menggunakan fungsi summarize(). Fungsi tersebut akan merubah data frame menjadi sebuah baris berisi ringkasan data yang kita inginkan. Berikut adalh contoh penerapannya:\nsummarize(flights, delay = mean(dep_delay, na.rm = TRUE))\r## # A tibble: 1 x 1\r## delay\r## \u0026lt;dbl\u0026gt;\r## 1 12.6\rFUngsi ini akan lebih berguna saat digunakan dengan fungsi group_by() sehingga dapat diperoleh ringkasan data pada setiap grup. berikut adalah contoh penerapannya:\nby_day \u0026lt;- group_by(flights, year, month, day)\rsummarize(by_day, delay = mean(dep_delay, na.rm = TRUE))\r## # A tibble: 365 x 4\r## # Groups: year, month [12]\r## year month day delay\r## \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 2013 1 1 11.5 ## 2 2013 1 2 13.9 ## 3 2013 1 3 11.0 ## 4 2013 1 4 8.95\r## 5 2013 1 5 5.73\r## 6 2013 1 6 7.15\r## 7 2013 1 7 5.42\r## 8 2013 1 8 2.55\r## 9 2013 1 9 2.28\r## 10 2013 1 10 2.84\r## # ... with 355 more rows\r\r3.5.7 Mengkombinasikan Beberapa Operasi Menggunakan Operator Pipe (%\u0026gt;%)\rOperator pipa (%\u0026gt;%) sangat berguna untuk merangkai bersama beberapa fungsi dplyr dalam suatu urutan operasi. Perhatikan contoh sebelumnya dimana setiap kali kita ingin menerapkan lebih dari satu fungsi, urutannya akan dimulai dalam urutan panggilan fungsi bersarang yang sulit dibaca. Secara ringkas dapat kita tulis sebagai berikut:\nthird(second(first(x)))\rJika dituliskan menggunakan operator pipa akan menghasilkan sintak berikut:\nx %\u0026gt;%\rfirst() %\u0026gt;%\rsecond() %\u0026gt;%\rthird()\rDengan menuliskannya melalui cara tersebut kita dapat membacanya lebih mudah.\nMisal kita ingin mengetahui hubungan antara variabel jarak (dist) terhadap rata-rata delay (arr_delay). Langkah-langkah untuk melakukannya dengan menggunakan operator pipa adalah sebagai berikut:\nKelompokkan penerbangan berdasarkan destinasinya (group_by()).\rHitung ringkasan data berdasarkan jarak, rata-rata delay, dan jumlah penerbangan.\rLakukan filter untuk membuang noisy point (jika diperlukan). Dalam hal ini jumlah penerbangan \u0026gt; 20 dan tujuan penerbangan Honolulu (“HNL”) adalah outlier atau noisy point.\r\rBerikut adalah sintaks untuk melakukannya:\n## # A tibble: 96 x 4\r## dest count dist delay\r## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 ABQ 254 1826 4.38\r## 2 ACK 265 199 4.85\r## 3 ALB 439 143 14.4 ## 4 ATL 17215 757. 11.3 ## 5 AUS 2439 1514. 6.02\r## 6 AVL 275 584. 8.00\r## 7 BDL 443 116 7.05\r## 8 BGR 375 378 8.03\r## 9 BHM 297 866. 16.9 ## 10 BNA 6333 758. 11.8 ## # ... with 86 more rows\r## ## Attaching package: \u0026#39;ggplot2\u0026#39;\r## The following object is masked from \u0026#39;mtcars\u0026#39;:\r## ## mpg\r## `geom_smooth()` using method = \u0026#39;loess\u0026#39; and formula \u0026#39;y ~ x\u0026#39;\r\rFigure 3: Jarak vs rata-rata delay\r\rBerdasarkan Figure 3, rata-rata delay meningkat seiring dengan pertambahan jarak penerbangan.\nReferensi\nWickham, H. Grolemund G. 2016. R For Data Science: Import, Tidy, Transform, Visualize, And Model Data. O’Reilly Media, Inc.\rPeng, R.D. 2015. Exploratory Data Analysis with R. Leanpub book.\rDplyr Documentation. https://dplyr.tidyverse.org/\rQuick-R. Data Input. https://www.statmethods.net/input/index.html\rQuick-R. Data Management. https://www.statmethods.net/management/index.html\rSTHDA. Importing Data Into R . http://www.sthda.com/english/wiki/importing-data-into-r\rSTHDA. Exporting Data From R. http://www.sthda.com/english/wiki/exporting-data-from-r\r\r\r\r","date":1552064400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552064400,"objectID":"c2a25e2085b59e5ca11c8574a4822636","permalink":"/tutorial/03_manajemen-data-r/","publishdate":"2019-03-09T00:00:00+07:00","relpermalink":"/tutorial/03_manajemen-data-r/","section":"tutorial","summary":"Daftar Isi:\r\rImport File\rEksport File\rTibble Data Format\rMerapikan Data\rTransformasi Data\r\r\r3.1 Import File\rPada sesi bagian ini penulis akan menjelaskan cara mengimport file pada R. File yang diimport ke dalam R terdiri atas file yang sering digunakan pada saat akan melakukan analisis data, antara lain: TXT, CSv, Excel, SPSS, SAS, dan STATA.\nPada bagian ini akan dijelaskan pula bagaimana melakukan import data menggunakan library readr serta kelebihan dari metode import data yang digunakan.","tags":null,"title":"3. Manajemen Data R","type":"docs"},{"authors":null,"categories":null,"content":"\r\rDaftar Isi\r\rSejarah R\rFitur dan Karakteristik R\rKelebihan dan Kekurangan R\rRStudio\rMenginstall R dan RStudio\rWorking Directory\rFasilitas Help\r\r\r1.1 Sejarah R\rR Merupakan bahasa yang digunakan dalam komputasi statistik yang pertama kali dikembangkan oleh Ross Ihaka dan Robert Gentlement di University of Auckland New Zealand yang merupakan akronim dari nama depan kedua pembuatnya. Sebelum R dikenal ada S yang dikembangkan oleh John Chambers dan rekan-rekan dari Bell Laboratories yang memiliki fungsi yang sama untuk komputasi statistik. Hal yang membedakan antara keduanya adalah R merupakan sistem komputasi yang bersifat gratis.Logo R dapat dilihat pada Figure 1.\n\rFigure 1: Logo R.\r\rR dapat dibilang merupakan aplikasi sistem statistik yang kaya. Hal ini disebabkan banyak sekali paket yang dikembangkan oleh pengembang dan komunitas untuk keperluan analisa statistik seperti linear regression, clustering, statistical test, dll. Selain itu, R juga dapat ditambahkan paket-paket lain yang dapat meningkatkan fiturnya.\nSebagai sebuah bahasa pemrograman yang banyak digunakan untuk keperluan analisa data, R dapat dioperasikan pada berbagai sistem operasi pada komputer. Adapun sistem operasi yang didukung antara lain: UNIX, Linux, Windows, dan MacOS.\n\r1.2 Fitur dan Karakteristik R\rR memiliki karakteristik yang berbeda dengan bahasa pemrograman lain seperti C++,python, dll. R memiliki aturan/sintaks yang berbeda dengan bahasa pemrograman yang lain yang membuatnya memiliki ciri khas tersendiri dibanding bahasa pemrograman yang lain.\nBeberapa ciri dan fitur pada R antara lain:\nBahasa R bersifat case sensitif. maksudnya adalah dalam proses input R huruf besar dan kecil sangat diperhatikan. Sebagai contoh kita ingin melihat apakah objek A dan B pada sintaks berikut:\r\rA \u0026lt;- \u0026quot;Andi\u0026quot;\rB \u0026lt;- \u0026quot;andi\u0026quot;\r# cek kedua objek A dan B\rA == B\r## [1] FALSE\r# Kesimpulan : Kedua objek berbeda\rSegala sesuatu yang ada pada program R akan diangap sebagai objek. konsep objek ini sama dengan bahasa pemrograma berbasis objek yang lain seperti Java, C++, python, dll.Perbedaannya adalah bahasa R relatif lebih sederhana dibandingkan bahasa pemrograman berbasis obejk yang lain.\rinterpreted language atau script. Bahasa R memungkinkan pengguna untuk melakukan kerja pada R tanpa perlu kompilasi kode program menjadi bahasa mesin.\rMendukung proses loop, decision making, dan menyediakan berbagai jenis operstor (aritmatika, logika, dll).\rMendukung export dan import berbagai format file, seperti:TXT, CSV, XLS, dll.\rMudah ditingkatkan melalui penambahan fungsi atau paket. Penambahan paket dapat dilakukan secara online melalui CRAN atau melalui sumber seperti github.\rMenyedikan berbagai fungsi untuk keperluan visualisasi data. Visualisasi data pada R dapat menggunakan paket bawaan atau paket lain seperti ggplo2,ggvis, dll.\r\r\r1.3 Kelebihan dan Kekurangan R\rSelain karena R dapat digunakan secara gratis terdapat kelebihan lain yang ditawarkan, antara lain:\nProtability. Penggunaan software dapat digunakan kapanpun tanpa terikat oleh masa berakhirnya lisensi.\rMultiplatform. R bersifat Multiplatform Operating Systems, dimana software R lebih kompatibel dibanding software statistika lainnya. Hal in berdampak pada kemudahan dalam penyesuaian jika pengguna harus berpindah sistem operasi karena R baik pada sistem operasi seperti windows akan sama pengoperasiannya dengan yang ada di Linux (paket yang digunakan sama).\rGeneral dan Cutting-edge. Berbagai metode statistik baik metode klasik maupun baru telah diprogram kedalam R. Dengan demikian software ini dapat digunakan untuk analisis statistika dengan pendekatan klasik dan pendekatan modern.\rProgramable. Pengguna dapat memprogram metode baru atau mengembangakan modifikasi dari analisis statistika yang telah ada pada sistem R.\rBerbasis analisis matriks. Bahasa R sangat baik digunakan untuk programming dengan basis matriks.\rFasiltas grafik yang lengkap.\r\rAdapun kekurangan dari R antara lain:\nPoint and Click GUI. Interaksi utama dengan R bersifat CLI (Command Line Interface), walaupun saat ini telah dikembangkan paket yang memungkinkan kita berinteraksi dengan R menggunakan GUI (Graphical User Interface) sederhana menggunakan paket R-Commander yang memiliki fungsi yang terbatas. R- Commander sendiri merupakan GUI yang diciptakan dengan tujuan untuk keperluan pengajaran sehingga analisis statistik yang disediakan adalah yang klasik. Meskipun terbatas paket ini berguna jika kita membutuhkan analisis statistik sederhana dengan cara yang simpel.\rMissing statistical function. Meskipun analisis statistika dalam R sudah cukup lengkap, namun tidak semua metode statistika telah diimplementasikan ke dalam R. Namun karena R merupakan lingua franca untuk keperluan komputasi statistika modern staan ini, dapat dikatakan ketersediaan fungsi tambahan dalam bentuk paket hanya masalah waktu saja.\r\r\r1.4 RStudio\rAplikasi R pada dasarnya berbasis teks atau command line sehingga pengguna harus mengetikkan perintah-perintah tertentu dan harus hapal perintah-perintahnya. Setidaknya jika kita ingin melakukan kegiatan analisa data menggunakan R kita harus selalu siap dengan perintah-perintah yang hendak digunakan sehingga buku manual menjadi sesuatu yang wajib adasaat berkeja dengan R.\nKondisi ini sering kali membingunkan bagi pengguna pemula maupun pengguna mahir yang sudah terbiasa dengan aplikasi statistik lain seperti SAS, SPSS, Minitab, dll. Alasan itulah yang menyebabkan pengembang R membuat berbagai frontend untuk R yang berguna untuk memudahkan dalam pengoperasian R.\nRStudio merupakan salah satu bentuk frontend R yang cukup populer dan nyaman digunakan. Selain nyaman digunakan, RStudio memungkinkan kita melakukan penulisan laporan menggunakan Rmarkdown atau RNotebook serta membuat berbagai bentuk project seperti shyni, dll. Pada R studio juga memungkinkan kita mengatur working directory tanpa perlu mengetikkan sintaks pada Commander, yang diperlukan hanya memilihnya di menu RStudio. Selain itu, kita juga dapat meng-import file berisikan data tanpa perlu mengetikkan pada Commander dengan cara memilih pada menu Environment.\n\r1.5 Menginstall R dan RStudio\rPada tutorial ini hanya akan dijelaskan bagaimana menginstal R dan RStudio pada sistem operasi windows. Sebelum memulai menginstal sebaiknya pembaca mengunduh terlebih dahulu installer R dan RStudio.\nJalankan proses pemasangan dengan meng-klik installer aplikasi R dan RStudio.\rIkuti langkah proses pemasangan aplikasi yang ditampilkan dengan klik OK atau Next.\rApabila pemasangan telah dilakukan, jalankan aplikasi yang telah terpasang untuk menguji jika aplikasi telah berjalan dengan baik.\r\rJendela aplikasi yang telah terpasang ditampilkan pada Figure 2 dan Figure 3.\n\rFigure 2: Jendela R.\r\r\rFigure 3: Jendela RStudio.\r\r\rNote:  Sebaiknya install R terlebih dahulu sebelum RStudio\n\r\r1.6 Working Directory\rSetiap pengguna akan bekerja pada tempat khusus yang disebut sebagai working directory. working directory merupakan sebuah folder dimana R akan membaca dan menyimpan file kerja kita. Pada pengguna windows, working directory secara default pada saat pertama kali menginstall R terletak pada folder c:\\\\Document.\n1.6.1 Mengubah Lokasi Working Directory\rKita dapat mengubah lokasi working directory berdasarkan lokasi yang kita inginkan, misalnya letak data yang akan kita olah tidak ada pada folder default atau kita ingin pekerjaan kita terkait R dapat berlangsung pada satu folder khusus.\nBerikut adalah cara mengubah working directory pada R.\nBuatlah folder pada drive (kita bisa membuat folder pada selain drive c) dan namai dengan nama yang kalian inginkan. Pada tutorial ini penulis menggunakan nama folder R.\rJika pengguna menggunakan RStudio, pada menu RStudio pilih Session \u0026gt; Set Working Directory \u0026gt; Chooses Directory. Proses tersebut ditampilkan pada Figure 4\rPilih folder yang telah dibuat pada step 1 sebagai *working directory.\r\r\rNote:  Data atau file yang hendak dibaca selama proses kerja pada R harus selalu diletakkan pada working directory. Jika tidak maka data atau file tidak akan terbaca.\n\rUntuk mengecek apakah proses perubahan telah terjadi, kita dapat mengeceknya dengan menjalankan perintah berikut untuk melihat lokasi working directory kita yang baru.\ngetwd()\r\rFigure 4: Mengubah working directory.\r\rSelain itu kita dapat mengubah working directory menggunakan perintah berikut:\n# Ubah working directori pada folder R\rsetwd(\u0026quot;/Documents/R\u0026quot;)\r\rNote:  Pada proses pengisian lokasi folder pastikan pemisah pada lokasi folder menggunakan tanda “/” bukan “\u0026quot;\n\r\r1.6.2 Mengubah Lokasi Working Directory Default\rPada proses yang telah penulis jelaskan sebelumnya. Proses perubahan working directory hanya berlaku pada saat pekerjaan tersebut dilakukan. Setelah pekerjaan selesai dan kita menjalankan kembali R maka working directory akan kembali secara default pada working directory lama.\nUntuk membuat lokasi default working directory pindah, kita dapat melakukannya dengan memilih pada menu: Tools \u0026gt; Global options \u0026gt; pada “General” klik pada “Browse” dan pilih lokasi working directory yang diinginkan. Proses tersebut ditampilkan pada Figure 5\n\rFigure 5: Merubah working directory melalui Global options.\r\r\r\r1.7 Fasilitas Help\rAgar dapat menggunakan R dengan secara lebih baik, pengetahuan untuk mengakses fasilitas help in cukup penting untuk disampaikan. Adapun cara yang dapat digunakan adalah sebagai berikut.\n1.7.1 Mencari Help dari Suatu Perintah Tertentu\rUntuk memperoleh bantuan terkait suatu perintah tertentu kita dapat menggunakan fungsi help(). Secara umum format yang digunakan adalah sebagai berikut:\nhelp(nama_perintah)\ratau dapat juga menggunakan tanda tanya (?) pada awal nama_perintah seperti berikut:\n?nama_perintah\rMisalkan kita kebingungan terkait bagaimana cara menuliskan perintah untuk menghitung rata-rata suatu vektor. Kita dapat mengetikkan perintah berikut untuk mengakses fasilitas help.\nhelp(mean)\r#atau\r?mean\rPerintah tersebut akan memunculkan hasil berupa dokumentasi yang ditampilkan pada Figure 6.\n\rFigure 6: Jendela help dokumentasi fungsi mean().\r\rKeterangan pada jendela pada Figure 6 adalah sebagia berikut:\nPada bagian jendela kiri atas jendela help, diberikan keterangan nama dari perintah yang sedang ditampilkan.\rSelanjutnya, pada bagian atas dokumen, ditampilkan infomasi terkait nama perintah, dan nama library yang memuat perintah tersebut. Pada gambar diatas informasi terkait perintah dan nama library ditunjukkan pada teks mean {base} yang menunjukkan perintah mean() pada paket (library) base (paket bawaan R).\rSetiap jendela help dari suatu perintah tertentu selanjutnya akan memuat bagian-bagian berikut:\r\r\rTitle\rDescription : deskripsi singkat tentang perintah.\rUsage : menampilkan sintaks perintah untuk penggunaan perintah tersebut.\rArguments : keterangan mengenai argument/inputyang diperlukan pada perintah tersebut.\rDetails : keterangan lebih lengkap lengkap tentang perintah tersebut.\rValue : keterangan tentang output suatu perintah dapat diperoleh pada bagian ini.\rAuthor(s) : memberikan keterangan tentang Author dari perintah tersebut.\rReferences : seringkali referensi yang dapat digunakan untuk memperoleh keterangan lebih lanjut terhadap suatu perintah ditampilkan pada bagian ini.\rSee also: bagian ini berisikan daftar perintah/fungsi yang berhubungan erat dengan perintah tersebut.\rExample : berisikan contoh-contoh penggunaan perintah tersebut.\r\rKita juga dapat melihat contoh penggunaan dari perintah tersebut. Untuk melakukannya kita dapat menggunakan fungsi example(). Fungsi tersebut akan menampilkan contoh kode penerapan dari fungsi yang kita inginkan. Secara sederhana fungsi tersebut dapat dituliskan sebagai berikut:\nexample(nama_perintah)\rUntuk mengetahui contoh kode fungsi mean(), ketikkan sintaks berikut:\nexample(mean)\r## ## mean\u0026gt; x \u0026lt;- c(0:10, 50)\r## ## mean\u0026gt; xm \u0026lt;- mean(x)\r## ## mean\u0026gt; c(xm, mean(x, trim = 0.10))\r## [1] 8.75 5.50\rkita juga dapat mencoba kode yang dihasilkan pada console R. Berikut adalah contoh penerapannya:\n# Menghitung rata-rata bilangan 1 sampai 10 dan 50\r# membuat vektor\rx \u0026lt;- c(0:10, 50)\r# Print\rx\r## [1] 0 1 2 3 4 5 6 7 8 9 10 50\r# mean\rmean(x)\r## [1] 8.75\rPembaca dapat mencoba melakukanya sendiri dengan mengganti nilai yang telah ada serta mencoba contoh kode yang lain.\n\r1.7.2 General Help\rKita juga dapat membaca beberapa dokumen manual yang ada pada R. Untuk melakukannya jalankan perintah berikut:\nhelp.start()\rOutput yang dihasilkan berupa link pada sejumlah dokumen yang dapat kita klik. Tampilan halaman yang dihasilkan disajikan pada Figure 7.\n\rFigure 7: Jendela general help dokumentasi fungsi mean().\r\r\r1.7.3 Fasilitas Help Lainnya\rSelain yang telah penulis sebutkan sebelumnya. Kita juga dapat memanfaatkan fasilitas help lainnya melalui fungsi apropos() dan help.search().\napropos (): mengembalikan daftar objek, berisi pola yang pembaca cari, dengan pencocokan sebagian. Ini berguna ketika pembaca tidak ingat persis nama fungsi yang akan digunakan. Berikut adalah contoh ketika penulis ingin mengetahui fungsi yang digunakan untuk menghitung median.\napropos(\u0026quot;med\u0026quot;)\r## [1] \u0026quot;elNamed\u0026quot; \u0026quot;elNamed\u0026lt;-\u0026quot; \u0026quot;median\u0026quot; \u0026quot;median.default\u0026quot;\r## [5] \u0026quot;medpolish\u0026quot; \u0026quot;runmed\u0026quot;\rList yang dihasilkan berupa fungsi-fungsi yang memiliki elemen kata “med”. Berdasarkan pencaria tersebut penulis dapat mencoba menggunakan fungsi “median” untuk menghitung median.\nhelp.search () (sebagai alternatif ??): mencari dokumentasi yang cocok dengan karakter yang diberikan dengan cara yang berbeda. Ini mengembalikan daftar fungsi yang mengandung istilah yang pembaca cari dengan deskripsi singkat dari fungsi.\nBerikut adalah contoh penerapan dari fungsi tersebut:\nhelp.search(\u0026quot;mean\u0026quot;)\r# atau\r??mean\r*Output yang dihasilkan akan tampak seperti pada Figure 8.\n\rFigure 8: Jendela help search dokumentasi fungsi mean().\r\rReferensi\nPrimartha, R. 2018. Belajar Machine Learning Teori dan Praktik. Penerbit Informatika : Bandung\rRosadi,D. 2016. Analisis Statistika dengan R. Gadjah Mada University Press: Yogyakarta\rSTHDA. Running RStudio and Setting Up Your Working Directory - Easy R Programming .http://www.sthda.com/english/wiki/running-rstudio-and-setting-up-your-working-directory-easy-r-programming#set-your-working-directory\rSTDHA. Getting Help With Functions In R Programming. http://www.sthda.com/english/wiki/getting-help-with-functions-in-r-programming .\rVenables, W.N. Smith D.M. and R Core Team. 2018. An Introduction to R. R Manuals.\r\r\r\r","date":1552064400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552064400,"objectID":"6f47ca1c793632cbfe1f0e525b3f1460","permalink":"/tutorial/01_mengenal-bahasa-r/","publishdate":"2019-03-09T00:00:00+07:00","relpermalink":"/tutorial/01_mengenal-bahasa-r/","section":"tutorial","summary":"Daftar Isi\r\rSejarah R\rFitur dan Karakteristik R\rKelebihan dan Kekurangan R\rRStudio\rMenginstall R dan RStudio\rWorking Directory\rFasilitas Help\r\r\r1.1 Sejarah R\rR Merupakan bahasa yang digunakan dalam komputasi statistik yang pertama kali dikembangkan oleh Ross Ihaka dan Robert Gentlement di University of Auckland New Zealand yang merupakan akronim dari nama depan kedua pembuatnya. Sebelum R dikenal ada S yang dikembangkan oleh John Chambers dan rekan-rekan dari Bell Laboratories yang memiliki fungsi yang sama untuk komputasi statistik.","tags":null,"title":"1. Mengenal Bahasa R","type":"docs"},{"authors":null,"categories":null,"content":"\r\rDaftar Isi\r\rOperator Aritmatika\rFungsi Aritmetik\rOperator Relasi\rOperator Logika\rMemasukkan Nilai Kedalam Variabel\rTipe Data\rVektor\rMatriks\rFaktor\rData Frames\rList\rLoop\rDecision Making\rFungsi\r\r\r2.1 Operator Aritmatika\rProses perhitungan akan ditangani oleh fungsi khusus. R akan memahami urutannya secara benar. Kecuali kita secara eksplisit menetapkan yang lain. Sebagai contoh jalankan sintaks berikut:\n2+4*2\r## [1] 10\rBandingkan dengan sintaks berikut:\n(2+4)*2\r## [1] 12\r\rR dapat digunakan sebagai kalkulator\n\rBerdasarkan kedua hasil tersebut dapat disimpulkan bahwa ketika kita tidak menetapkan urutan perhitungan menggunakan tanda kurung, R akan secara otomatis akan menghitung terlebih dahulu perkalian atau pembangian.\nOperator aritmatika yang disediakan R adalah sebagai berikut:\nTable 1 Operator Aritmatika R\n\r\r\r\rSimbol\rKeterangan\r\r\r\r+\rAddition, untuk operasi penjumlahan\r\r-\rSubstraction, untuk operasi pengurangan\r\r*\rMultiplication, untuk operasi pembagian\r\r/\rDivision, untuk operasi pembagian\r\r^\rEksponentiation, untuk operasi pemangkatan\r\r%%\rModulus, Untuk mencari sisa pembagian\r\r%/%\rInteger, Untuk mencari bilangan bulat hasil pembagian saja dan tanpa sisa pembagian\r\r\r\rUntuk lebih memahaminya berikut contoh sintaks penerapan operator tersebut.\n# Addition\r5+3\r## [1] 8\r# Substraction\r5-3\r## [1] 2\r# Multiplication\r5*3\r## [1] 15\r# Division\r5/3\r## [1] 1.666667\r# Eksponetiation\r5^3\r## [1] 125\r# Modulus\r5%%3\r## [1] 2\r# Integer\r5%/%3\r## [1] 1\r\rNote:  Pada R tanda # berfungsi menambahkan keterangan untuk menjelaskan sebuah sintaks pada R.\n\r\r2.2 Fungsi Aritmetik\rSelain fungsi operator aritmetik, pada R juga telah tersedia fungsi aritmetik yang lain seperti logaritmik, ekponensial, trigonometri, dll.\nLogaritma dan eksponensial\r\rUntuk contoh fungsi logaritmik dan eksponensial jalankan sintaks berikut:\nlog2(8) # logaritma basis 2 untuk 8\r## [1] 3\rlog10(8) # logaritma basis 10 untuk 8\r## [1] 0.90309\rexp(8) # eksponensial 8\r## [1] 2980.958\rFungsi trigonometri\r\rfungsi trigonometri yang ditampilkan seperti sin,cos, tan, dll.\ncos(x) # cos x\rsin(x) # Sin x\rtan(x) # Tan x\racos(x) # arc-cos x\rasin(x) # arc-sin x\ratan(x) #arc-tan x\r\rNote:  x dalam fungsi trigonometri memiliki satuan radian\n\rBerikut adalah salah satu contoh penggunaannya:\ncos(pi)\r## [1] -1\rFungsi matematik lainnya\r\rFungsi lainnya yang dapat digunakan adalah fungsi absolut, akar kuadrat, dll. Berikut adalah contoh sintaks penggunaan fungsi absolut dan akar kuadrat.\nabs(-2) # nilai absolut -2\r## [1] 2\rsqrt(4) # akar kuadrat 4\r## [1] 2\r\r2.3 Operator Relasi\rOperator relasi digunakan untuk membandingkan satu objek dengan objek lainnya. Operator yang disediakan R disajikan pada Table 2.\nTable 2 Operator Relasi R\n\r\rSimbol\rKeterangan\r\r\r\r“\u0026gt;”\rLebih besar dari\r\r“\u0026lt;”\rLebih Kecil dari\r\r“==”\rSama dengan\r\r“\u0026gt;=”\rLebih besar sama dengan\r\r“\u0026lt;=”\rLebih kecil sama dengan\r\r“!=”\rTidak sama dengan\r\r\r\rBerikut adalah penerapan operator pada tabel tersebut:\nx \u0026lt;- 34\ry \u0026lt;- 35\r# Operator \u0026gt;\rx \u0026gt; y\r## [1] FALSE\r# Operator \u0026lt;\rx \u0026lt; y\r## [1] TRUE\r# operator ==\rx == y\r## [1] FALSE\r# Operator \u0026gt;=\rx \u0026gt;= y\r## [1] FALSE\r# Operator \u0026lt;=\rx \u0026lt;= y\r## [1] TRUE\r# Operator !=\rx != y\r## [1] TRUE\r\r2.4 Operator Logika\rOperator logika hanya berlaku pada vektor dengan tipe logical, numeric, atau complex. Semua angka bernilai 1 akan dianggap bernilai logika TRUE. Operator logika yang disediakan R dapat dilihat pada Table 3.\nTable 3 Operator logika R\n\r\rSimbol\rKeterangan\r\r\r\r\u0026amp;\u0026amp;\rOperator logika AND\r\r\r\r\r!\rOpeartor logika NOT\r\r\u0026amp;\rOperator logika AND element wise\r\r\rOperator logika OR element wise\r\r\r\rPenerapannya terdapat pada sintaks berikut:\nv \u0026lt;- c(TRUE,TRUE, FALSE)\rt \u0026lt;- c(FALSE,FALSE,FALSE)\r# Operator \u0026amp;\u0026amp;\rprint(v\u0026amp;\u0026amp;t)\r## [1] FALSE\r# Operator ||\rprint(v||t)\r## [1] TRUE\r# Operator !\rprint(!v)\r## [1] FALSE FALSE TRUE\r# operator \u0026amp;\rprint(v\u0026amp;t)\r## [1] FALSE FALSE FALSE\r# Operator |\rprint(v|t)\r## [1] TRUE TRUE FALSE\r\rNote: \noperator \u0026amp; dan | akan mengecek logika tiap elemen pada vektor secara berpesangan (sesuai urutan dari kiri ke kanan).\nOperator %% dan || hanya mengecek dari kiri ke kanan pada observasi pertama. Misal saat menggunakan \u0026amp;\u0026amp; jika observasi pertama TRUE maka observasi pertama pada vektor lainnya akan dicek, namun jika observasi pertama FALSE maka proses akan segera dihentikan dan menghasilkan FALSE.\n\r\r2.5 Memasukkan Nilai Kedalam Variabel\rVariabel pada R dapat digunakan untuk menyimpan nilai. Sebagai contoh jalankan sintaks berikut:\n# Harga sebuah lemon adalah 500 rupiah\rlemon \u0026lt;- 500\r# Atau\r500 -\u0026gt; lemon\r# dapat juga menggunakan tanda \u0026quot;=\u0026quot;\rlemon = 500\r\rNote: \nR memungkinkan penggunaan \u0026lt;-,-\u0026gt;, atau = sebagai perintah pengisi nilai variabel\n\rR bersifat case-sensitive. Maksudnya adalah variabel Lemon tidak sama dengan lemon (Besar kecil huruf berpengaruh)\n\r\r\rUntuk mengetahui nilai dari objek lemon kita dapat menggunakan fungsi print() atau mengetikkan nama objeknya secara langsung.\n# Menggunakan fungsi print()\rprint(lemon)\r## [1] 500\r# Atau\rlemon\r## [1] 500\rR akan menyimpan variabel lemon sebagai objek pada memori. Sehingga kita dapat melakukan operasi terhadap objek tersebut seperti mengalikannya atau menjumlahkannya dengan bilangan lain. Sebagai contoh jalankan sintaks berikut:\n# Operasi perkalian terhadap objek lemon\r5*lemon\r## [1] 2500\rKita dapat juga mengubah nilai dari objek lemon dengan cara menginput nilai baru terhadap objek yang sama. R secara otomatis akan menggatikan nilai sebelumnya. Untuk lebih memahaminya jalankan sintaks berikut:\nlemon \u0026lt;- 1000\r# Print lemon\rprint(lemon)\r## [1] 1000\rUntuk lebih memahaminya berikut adalah sintaks untuk menghitung volume suatu objek.\n# Dimensi objek\rpanjang \u0026lt;- 10\rlebar \u0026lt;- 5\rtinggi \u0026lt;- 5\r# Menghitung volume\rvolume \u0026lt;- panjang*lebar*tinggi\r# Print objek volume\rprint(volume)\r## [1] 250\rUntuk mengetahui objek apa saja yang telah kita buat sepanjang artikel ini kita dapang menggunakan fungsi ls().\nls()\r## [1] \u0026quot;lebar\u0026quot; \u0026quot;lemon\u0026quot; \u0026quot;panjang\u0026quot; \u0026quot;t\u0026quot; \u0026quot;tinggi\u0026quot; \u0026quot;v\u0026quot; \u0026quot;volume\u0026quot; ## [8] \u0026quot;x\u0026quot; \u0026quot;y\u0026quot;\r\rKumpulan objek yang telah tersimpan dalam memori disebut sebagai workspace\n\rUntuk menghapus objek pada memori kita dapat menggunakan fungsi rm(). Pada sintaks berikut penulis hendak menghapus objek lemon dan volume.\n# Menghapus objek lemon dan volume\rrm(lemon, volume)\r# Tampilkan kembali objek yang tersisa\rls()\r## [1] \u0026quot;lebar\u0026quot; \u0026quot;panjang\u0026quot; \u0026quot;t\u0026quot; \u0026quot;tinggi\u0026quot; \u0026quot;v\u0026quot; \u0026quot;x\u0026quot; \u0026quot;y\u0026quot;\r\rNote:  Setiap variabel atau objek yang dibuat akan menempati sejumlah memori pada komputer sehingga jika kita bekerja dengan jumlah data yang banyak pastikan kita menghapus seluruh objek pada memori sebelum memulai kerja.\n\r\r2.6 Tipe Data\rData pada R dapat dikelompokan berdasarkan beberapa tipe. Tipe data pada R disajikan pada Table 4.\nTable 4 Tipe Data R\n\r\rTipe Data\rContoh\rKeterangan\r\r\r\rLogical\rTRUE, FALSE\rNilai Boolean\r\rNumeric\r12.3, 5, 999\rSegala jenis angka\r\rInteger\r23L, 97L, 3L\rBilangan integer (bilangan bulat)\r\rComplex\r2i, 3i, 9i\rBilangan kompleks\r\rCharacter\r‘a’, “b”, “123”\rKarakter dan string\r\rRaw\rIdentik dengan “hello”\rSegala jenis data yang disimpan sebagai raw bytes\r\r\r\rSintaks berikut adalah contoh dari tipe data pada R. Untuk mengetahui tipa data suatu objek kita dapat menggunakan perintah class()\n# Logical\rapel \u0026lt;- TRUE\rclass(apel)\r## [1] \u0026quot;logical\u0026quot;\r# Numeric\rx \u0026lt;- 2.3\rclass(x)\r## [1] \u0026quot;numeric\u0026quot;\r# Integer\ry \u0026lt;- 2L\rclass(y)\r## [1] \u0026quot;integer\u0026quot;\r# Compleks\rz \u0026lt;- 5+2i\rclass(z)\r## [1] \u0026quot;complex\u0026quot;\r# string\rw \u0026lt;- \u0026quot;saya\u0026quot;\rclass(w)\r## [1] \u0026quot;character\u0026quot;\r# Raw\rxy \u0026lt;- charToRaw(\u0026quot;hello world\u0026quot;)\rclass(xy)\r## [1] \u0026quot;raw\u0026quot;\rKeenam jenis data tersebut disebut sebagai tipe data atomik. Hal ini disebabkan karena hanya dapat menangani satu tipe data saja. Misalnya hanya numeric atau hanya integer.\nSelain menggunakan fungsi class(), kita dapat pula menggunakan fungsi is_numeric(), is.character(), is.logical(), dan sebagainya berdasarkan jenis data apa yang ingin kita cek. Berbeda dengan fungsi class(), ouput yang dihasilkan pada fungsi seperti is_numeric() adalah nilai Boolean sehingga fungsi ini hanya digunakan untuk mengecek apakah jenis data pada objek sama seperti yang kita pikirkan. Sebagai contoh disajikan pada sintaks berikut:\ndata \u0026lt;- 25\r# Cek apakah objek berisi data numerik\ris.numeric(data)\r## [1] TRUE\r# Cek apakah objek adalah karakter\ris.character(data)\r## [1] FALSE\rKita juga dapat mengubah jenis data menjadi jenis lainnya seperti integer menjadi numerik atau sebaliknya. Fungsi yang digunakan adalah as.numeric() jika ingin mengubah suatu jenis data menjadi numerik. Fungsi lainnya juga dapat digunakan sesuai dengan kita ingin mengubah jenis data objek menjadi jenis data lainnya.\n# Integer\rapel \u0026lt;- 2L\r# Ubah menjadi numerik\ras.numeric(apel)\r## [1] 2\r# Cek\ris.numeric(apel)\r## [1] TRUE\r# Logical\rnangka \u0026lt;- TRUE\r# Ubah logical menjadi numeric\ras.numeric(nangka)\r## [1] 1\r# Karakter\rminum \u0026lt;- \u0026quot;minum\u0026quot;\r# ubah karakter menjadi numerik\ras.numeric(minum)\r## Warning: NAs introduced by coercion\r## [1] NA\r\rNote:  Konversi karakter menjadi numerik akan menghasilkan output NA (not available). R tidak mengetahui bagaimana cara merubah karakter menjadi bentuk numerik.\n\rBerdasarkan Tabel 2, vektor karakter dapat dibuat menggunakan tanda kurung baik double quote (“”) maupun single quote (’’).Jika pada teks yang kita tuliskan mengandung quote maka kita harus menghentikannya menggunakan tanda ( ). Sbegai contoh kita ingin menuliskan `My friend’s name is “Adi”, pada sintaks akan dituliskan:\n\u0026#39;My friend\\`s name is \u0026quot;Adi\u0026quot;\u0026#39;\r## [1] \u0026quot;My friend`s name is \\\u0026quot;Adi\\\u0026quot;\u0026quot;\r# Atau\r\u0026quot;My friend\u0026#39;s name \\\u0026quot;Adi\\\u0026quot;\u0026quot;\r## [1] \u0026quot;My friend\u0026#39;s name \\\u0026quot;Adi\\\u0026quot;\u0026quot;\r\r2.7 Vektor\rVektor merupakan kombinasi berbagai nilai (numerik, karakter, logical, dan sebagainya berdasarkan jenis input data) pada objek yang sma. Pada contoh kasus berikut, pembaca akan memiliki sesuai jenis data input yaituvektor numerik, vector karakter, vektor logical, dll.\n2.7.1 Membuat vektor\rVektor dibuat dengan menggunakan fungsi c()(concatenate) seperti yang disajikan pada sintaks berikut:\n# membuat vektor numerik\rx \u0026lt;- c(3,3.5,4,7)\rx # print vektor\r## [1] 3.0 3.5 4.0 7.0\r# membuat vektor karakter\ry \u0026lt;- c(\u0026quot;Apel\u0026quot;, \u0026quot;Jeruk\u0026quot;, \u0026quot;Rambutan\u0026quot;, \u0026quot;Salak\u0026quot;)\ry # print vektor\r## [1] \u0026quot;Apel\u0026quot; \u0026quot;Jeruk\u0026quot; \u0026quot;Rambutan\u0026quot; \u0026quot;Salak\u0026quot;\r# membuat vektor logical\rt \u0026lt;- c(\u0026quot;TRUE\u0026quot;, \u0026quot;FALSE\u0026quot;, \u0026quot;TRUE\u0026quot;)\rt # print vektor\r## [1] \u0026quot;TRUE\u0026quot; \u0026quot;FALSE\u0026quot; \u0026quot;TRUE\u0026quot;\rselain menginput nilai pada vektor, kita juga dapat memberi nama nilai setiap vektor menggunakan fungsi names().\n# Membuat vektor jumlah buah yang dibeli\rJumlah \u0026lt;- c(5,5,6,7)\rnames(Jumlah) \u0026lt;- c(\u0026quot;Apel\u0026quot;, \u0026quot;Jeruk\u0026quot;, \u0026quot;Rambutan\u0026quot;, \u0026quot;Salak\u0026quot;)\r# Atau\rJumlah \u0026lt;- c(Apel=5, Jeruk=5, Rambutan=6, Salak=7)\r# Print\rJumlah\r## Apel Jeruk Rambutan Salak ## 5 5 6 7\r\rNote:  Vektor hanya dapat memuat satu buah jenis data. Vektor hanya dapat mengandung jenis data numerik saja, karakter saja, dll.\n\rUntuk menentukan panjang sebuah vektor kita dapat menggunakan fungsi lenght().\nlength(Jumlah)\r## [1] 4\r\r2.7.2 Missing Values\rSeringkali nilai pada vektor kita tidak lengkap atau terdapat nilai yang hilang (missing value) pada vektor. Missing value pada R dilambangkan oleh NA(not available). Berikut adalah contoh vektor dengan missing value.\nJumlah \u0026lt;- c(Apel=5, Jeruk=NA, Rambutan=6, Salak=7)\rUntuk mengecek apakah dalam objek terdapat missing value dapat menggunakan fungsi is.na(). ouput dari fungsi tersebut adalah nilai Boolean. Jika terdapat Missing value, maka output yang dihasilkan akan memberikan nilai TRUE.\nis.na(Jumlah)\r## Apel Jeruk Rambutan Salak ## FALSE TRUE FALSE FALSE\r\rNote: \nSelain NA terdapat NaN (not a number) sebagai missing value8. Nilai tersebut muncul ketika fungsi matematika yang digunakan pada proses perhitungan tidak bekerja sebagaimana mestinya. Contoh: 0/0 = NaN\nis.na() juga akan menghasilkan nilai TRUE pada NaN. Untuk membedakannya dengan NA dapat digunakan fungsi is.nan().\n\r\r2.7.3 Subset Pada Vektor\rSubseting vector terdiri atas tiga jenis, yaitu: positive indexing, Negative Indexing, dan .\n\rPositive indexing: memilih elemen vektor berdasarkan posisinya (indeks) dalam kurung siku.\r\r# Subset vektor pada urutan kedua\rJumlah[2]\r## Jeruk ## NA\r# Subset vektor pada urutan 2 dan 4\rJumlah[c(2, 4)]\r## Jeruk Salak ## NA 7\rSelain melalui urutan (indeks), kita juga dapat melakukan subset berdasarkan nama elemen vektornya.\nJumlah[\u0026quot;Jeruk\u0026quot;]\r## Jeruk ## NA\r\rNote:  Indeks pada R dimulai dari 1. Sehingga kolom atau elemen pertama vektor dimulai dari [1]\n\r\rNegative indexing: mengecualikan (exclude) elemen vektor.\r\r# mengecualikan elemen vektor 2 dan 4\rJumlah[-c(2,4)]\r## Apel Rambutan ## 5 6\r# mengecualikan elemen vektor 1 sampai 3\rJumlah[-c(1:3)]\r## Salak ## 7\r\rSubset berdasarkan vektor logical: Hanya, elemen-elemen yang nilai yang bersesuaian dalam vektor pemilihan bernilai TRUE, akan disimpan dalam subset.\r\r\rNote:  panjang vektor yang digunakan untuk subset harus sama.\n\rJumlah \u0026lt;- c(Apel=5, Jeruk=NA, Rambutan=6, Salak=7)\r# selecting vector\rmerah \u0026lt;- c(TRUE, FALSE, TRUE, FALSE)\r# Subset\rJumlah[merah==TRUE]\r## Apel Rambutan ## 5 6\r# Subset untuk elemen vektor bukan missing value\rJumlah[!is.na(Jumlah)]\r## Apel Rambutan Salak ## 5 6 7\r\r2.7.4 Perhitungan Menggunakan Vektor\rJika Anda melakukan operasi dengan vektor, operasi akan diterapkan ke setiap elemen vektor. Contoh disediakan pada sintaks di bawah ini:\npendapatan \u0026lt;- c(2000, 1800, 2500, 3000)\rnames(pendapatan) \u0026lt;- c(\u0026quot;Andi\u0026quot;, \u0026quot;Joni\u0026quot;, \u0026quot;Lina\u0026quot;, \u0026quot;Rani\u0026quot;)\rpendapatan\r## Andi Joni Lina Rani ## 2000 1800 2500 3000\r# Kalikan pendapatan dengan 3\rpendapatan*3\r## Andi Joni Lina Rani ## 6000 5400 7500 9000\rSeperti yang dapat dilihat, R mengalikan setiap elemen dengan bilangan pengali.\nKita juga dapat mengalikan vektor dengan vektor lainnya.Contohnya disajikan pada sintaks berikut:\n# membuat vektor dengan panjang sama dengan dengan vektor pendapatan\rcoefs \u0026lt;- c(2, 1.5, 1, 3)\r# Mengalikan pendapatan dengan vektor coefs\rpendapatan*coefs\r## Andi Joni Lina Rani ## 4000 2700 2500 9000\rBerdasarkan sintaks tersebut dapat terlihat bahwa operasi matematik terhadap masing-masing vektor dapat berlangsung jika panjang vektornya sama.\nBerikut adalah fungsi lain yang dapat digunakan pada operasi matematika vektor.\nmax(x) # memperoleh nilai maksimum x\rmin(x) # memperoleh nilai minimum x\rrange(x) # memperoleh range vektor x\rlength(x) # memperoleh jumlah elemen vektor x\rsum(x) # memperoleh total penjumlahan elemen vektor x\rprod(x) # memeperoleh produk elemen vektor x\rmean(x) # memperoleh nilai rata-rata seluruh elemen vektor x\rsd(x) # standar deviasi vektor x\rvar(x) # varian vektor x\rsort(x) # mengurutkan elemen vektor x dari yang terbesar\rContoh penggunaan fungsi tersebut disajikan beberapa pada sintaks berikut:\n# Menghitung range pendapatan\rrange(pendapatan)\r## [1] 1800 3000\r# menghitung rata-rata dan standar deviasi pendapatan\rmean(pendapatan)\r## [1] 2325\rsd(pendapatan)\r## [1] 537.7422\r\r\r2.8 Matriks\rMatriks seperti Excel sheet yang berisi banyak baris dan kolom (kumpulan bebrapa vektor). Matriks digunakan untuk menggabungkan vektor dengan tipe yang sama, yang bisa berupa numerik, karakter, atau logis. Matriks digunakan untuk menyimpan tabel data dalam R. Baris-baris matriks pada umumnya adalah individu / pengamatan dan kolom adalah variabel.\n2.8.1 Membuat matriks\rUntuk membuat matriks kita dapat menggunakan fungsi cbind() atau rbind(). Berikut adalah contoh sintaks untuk membuat matriks.\n# membuat vektor numerik\rcol1 \u0026lt;- c(5, 6, 7, 8, 9)\rcol2 \u0026lt;- c(2, 4, 5, 9, 8)\rcol3 \u0026lt;- c(7, 3, 4, 8, 7)\r# menggabungkan vektor berdasarkan kolom\rmy_data \u0026lt;- cbind(col1, col2, col3)\rmy_data\r## col1 col2 col3\r## [1,] 5 2 7\r## [2,] 6 4 3\r## [3,] 7 5 4\r## [4,] 8 9 8\r## [5,] 9 8 7\r# Mengubah atau menambahkan nama baris\rrownames(my_data) \u0026lt;- c(\u0026quot;row1\u0026quot;, \u0026quot;row2\u0026quot;, \u0026quot;row3\u0026quot;, \u0026quot;row4\u0026quot;, \u0026quot;row5\u0026quot;)\rmy_data\r## col1 col2 col3\r## row1 5 2 7\r## row2 6 4 3\r## row3 7 5 4\r## row4 8 9 8\r## row5 9 8 7\r\rNote: \n\rcbind(): menggabungkan objek R berdasarkan kolom\rrbind(): menggabungkan objek R berdasarkan baris\rrownames(): mengambil atau menetapkan nama-nama baris dari objek seperti-matriks\rcolnames(): mengambil atau menetapkan nama-nama kolom dari objek seperti-matriks\r\r\rKita dapat melakukan tranpose (merotasi matriks sehingga kolom menjadi baris dan sebaliknya) menggunakan fungsi t(). Berikut adalah contoh penerapannya:\nt(my_data)\r## row1 row2 row3 row4 row5\r## col1 5 6 7 8 9\r## col2 2 4 5 9 8\r## col3 7 3 4 8 7\rSelain melalui pembentukan sejumlah objek vektor, kita juga dapat membuat matriks menggunakan fungsi matrix(). Secara sederhana fungsi tersebut dapat dituliskan sebagai berikut:\nmatrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,\rdimnames = NULL)\r\rNote: \n\rdata: vektor data opsional\rnrow, ncol: jumlah baris dan kolom yang diinginkan, masing-masing.\rbyrow: nilai logis. Jika FALSE (default) matriks diisi oleh kolom, jika tidak, matriks diisi oleh baris.\rdimnames: Daftar dua vektor yang memberikan nama baris dan kolom masing-masing.\r\r\rDalam kode R di bawah ini, data input memiliki panjang 6. Kita ingin membuat matriks dengan dua kolom. Kita tidak perlu menentukan jumlah baris (di sini nrow = 3). R akan menyimpulkan ini secara otomatis. Matriks diisi kolom demi kolom saat argumen byrow = FALSE. Jika kita ingin mengisi matriks dengan baris, gunakan byrow = TRUE. Berikut adalah contoh pembuatan matriks menggunakan fungsi matrix().\ndata \u0026lt;- matrix(\rdata = c(1,2,3, 11,12,13), nrow = 2, byrow = TRUE,\rdimnames = list(c(\u0026quot;row1\u0026quot;, \u0026quot;row2\u0026quot;), c(\u0026quot;C.1\u0026quot;, \u0026quot;C.2\u0026quot;, \u0026quot;C.3\u0026quot;))\r)\rdata\r## C.1 C.2 C.3\r## row1 1 2 3\r## row2 11 12 13\rUntuk mengetahui dimensi dari suatu matriks, kita dapat menggunakan fungsi ncol() untuk mengetahui jumlah kolom matriks dan nrow() untuk mengetahui jumlah baris pada matriks. Berikut adalah contoh penerapannya:\n# mengetahui jumlah kolom\rncol(my_data)\r## [1] 3\r# mengetahui jumlah baris\rnrow(my_data)\r## [1] 5\rJika ingin memperoleh ringkasan terkait dimensi matriks kita juga dapat mengunakan fungsi dim() untuk mengetahui jumlah baris dan kolom matriks. Berikut adalah contoh penerapannya:\ndim(my_data) # jumlah baris dan kolom\r## [1] 5 3\r\r2.8.2 Subset Pada Matriks\rSama dengan vektor, subset juga dapat dilakukan pada matriks. Bedanya subset dilakukan berdasarkan baris dan kolom pada matriks.\n\rMemilih baris/kolom berdasarkan pengindeksan positif\r\rbaris atau kolom dapat diseleksi menggunakan format data[row, col]. Cara selesi ini sama dengan vektor, bedanya kita harus menetukan baris dan kolom dari data yang akan kita pilih. Berikut adalah contoh penerapannya:\n# Pilih baris ke-2\rmy_data[2,]\r## col1 col2 col3 ## 6 4 3\r# Pilih baris 2 sampai 4\rmy_data[2:4,]\r## col1 col2 col3\r## row2 6 4 3\r## row3 7 5 4\r## row4 8 9 8\r# Pilih baris 2 dan 4\rmy_data[c(2,4),]\r## col1 col2 col3\r## row2 6 4 3\r## row4 8 9 8\r# Pilih baris 2 dan kolom 3\rmy_data[2, 3]\r## [1] 3\r\rPilih berdasarkan nama baris/kolom\r\rBerikut adalah contoh subset berdasarkan nama baris atau kolom.\n# Pilih baris 1 dan kolom 3\rmy_data[\u0026quot;row1\u0026quot;,\u0026quot;col3\u0026quot;]\r## [1] 7\r# Pilih baris 1 sampai 4 dan kolom 3\rbaris \u0026lt;- c(\u0026quot;row1\u0026quot;,\u0026quot;row2\u0026quot;,\u0026quot;row3\u0026quot;)\rmy_data[baris, \u0026quot;col3\u0026quot;]\r## row1 row2 row3 ## 7 3 4\r\rKecualikan baris/kolom dengan pengindeksan negatif\r\rSama seperti vektor pengecualian data dapat dilakukan di matriks menggunakan pengindeksan negatif. Berikut cara melakukannya:\n# Kecualikan baris 2 dan 3 serta kolom 3\rmy_data[-c(2,3), -3]\r## col1 col2\r## row1 5 2\r## row4 8 9\r## row5 9 8\r\rPilihan dengan logik\r\rDalam kode R di bawah ini, misalkan kita ingin hanya menyimpan baris di mana col3\u0026gt; = 4:\ncol3 \u0026lt;- my_data[, \u0026quot;col3\u0026quot;]\rmy_data[col3 \u0026gt;= 4, ]\r## col1 col2 col3\r## row1 5 2 7\r## row3 7 5 4\r## row4 8 9 8\r## row5 9 8 7\r\r2.8.3 Perhitungan Menggunakan Matriks\r_ Kita juga dapat melakukan operasi matematika pada matriks. Pada operasi matematika pada matriks proses yang terjadi bisa lebih kompleks dibanding pada vektor, dimana kita dapat melakukan operasi untuk memperoleh gambaran data pada tiap kolom atau baris.\nBerikut adalah contoh operasi matematika sederhana pada matriks:\n# mengalikan masing-masing elemen matriks dengan 2\rmy_data*2\r## col1 col2 col3\r## row1 10 4 14\r## row2 12 8 6\r## row3 14 10 8\r## row4 16 18 16\r## row5 18 16 14\r# memperoleh nilai log basis 2 pada masing-masing elemen matriks\rlog2(my_data)\r## col1 col2 col3\r## row1 2.321928 1.000000 2.807355\r## row2 2.584963 2.000000 1.584963\r## row3 2.807355 2.321928 2.000000\r## row4 3.000000 3.169925 3.000000\r## row5 3.169925 3.000000 2.807355\rSeperti yang telah penulis jelaskan sebelumnya, kita juga dapat melakukan operasi matematika untuk memperoleh hasil penjumlahan elemen pada tiap baris atau kolom dengan menggunakan fungsi rowSums() untuk baris dan colSums() untuk kolom.\n# Total pada tiap kolom\rcolSums(my_data)\r## col1 col2 col3 ## 35 28 29\r# Total pada tiap baris\rrowSums(my_data)\r## row1 row2 row3 row4 row5 ## 14 13 16 25 24\rJika kita tertarik untuk mencari nilai rata-rata tiap baris arau kolom kita juga dapat menggunakan fungsi rowMeans() atau colMeans(). Berikut adalah contoh penerapannya:\n# Rata-rata tiap baris\rrowMeans(my_data)\r## row1 row2 row3 row4 row5 ## 4.666667 4.333333 5.333333 8.333333 8.000000\r# Rata-rata tiap kolom\rcolMeans(my_data)\r## col1 col2 col3 ## 7.0 5.6 5.8\rKita juga dapat melakukan perhitungan statistika lainnya menggunakan fungsi apply(). Berikut adalah format sederhananya:\napply(x, MARGIN, FUN)\r\rNote: \n\rx : data matriks\rMARGIN : Nilai yang dapat digunakan adalah 1 (untuk operasi pada baris) dan 2 (untuk operasi pada kolom)\rFUN : fungsi yang diterapkan pada baris atau kolom\r\r\runtuk mengetahui fungsi (FUN) apa saja yang dapat diterapkan pada fungsi apply() jalankan sintaks bantuan berikut:\nhelp(apply)\rBerikut adalah contoh penerapannya:\n# Rata-rata pada tiap baris\rapply(my_data, 1, mean)\r## row1 row2 row3 row4 row5 ## 4.666667 4.333333 5.333333 8.333333 8.000000\r# Median pada tiap kolom\rapply(my_data, 2, median)\r## col1 col2 col3 ## 7 5 7\r\r\r2.9 Faktor\rDalam bahasa R , faktor merupakan verktor dengan level. Level disimpan sebagai R Character. Jika kita menggunakan SPSS maka factor ini akan sama dengan jenis data numerik atau ordinal.\nFaktor merepresentasikan kategori atau grup pada data. Untuk membuat faktor pada R, kita dapat menggunakan fungsi factor().\n2.9.1 Membuat Variabel Faktor\rBerikut adalah contoh sintaks pembuatan variabel faktor.\n# membuat variabel faktor\rfaktor \u0026lt;- factor(c(1,2,1,2))\rfaktor\r## [1] 1 2 1 2\r## Levels: 1 2\rPada sintaks tersebut objek faktor terdiri atas dua buah kategori atau pada R disebut sebagai factor levels. Kita dapat mengecek factor levels menggunakan fungsi levels().\nlevels(faktor)\r## [1] \u0026quot;1\u0026quot; \u0026quot;2\u0026quot;\rKita juga dapat memberikan label atau mengubah level pada faktor. Berikut adalah contoh bagaimana kita melakukannya:\n# Ubah level\rlevels(faktor) \u0026lt;- c(\u0026quot;baik\u0026quot;,\u0026quot;tidak_baik\u0026quot;)\rfaktor\r## [1] baik tidak_baik baik tidak_baik\r## Levels: baik tidak_baik\r# Ubah urutan level\rfaktor \u0026lt;- factor(faktor,\rlevels = c(\u0026quot;tidak_baik\u0026quot;,\u0026quot;baik\u0026quot;))\rfaktor\r## [1] baik tidak_baik baik tidak_baik\r## Levels: tidak_baik baik\r\rNote: \n\rFungsi is.factor() dapat digunakan untuk mengecek apakah sebuah variabel adalah faktor. Hasil yang dimunculkan dapat berupa TRUE (jika faktor) atau FALSE (jika bukan)\rFungsi as.factor() dapat digunakan untuk merubah sebuah variabel menjadi faktor.\r\r\r# Cek jika objek faktor adalah faktor\ris.factor(faktor)\r## [1] TRUE\r# Cek jika objek Jumlah adalah faktor\ris.factor(Jumlah)\r## [1] FALSE\r# Ubah objek Jumlah menjadi faktor\ras.factor(Jumlah)\r## Apel Jeruk Rambutan Salak ## 5 \u0026lt;NA\u0026gt; 6 7 ## Levels: 5 6 7\r\r2.9.2 Perhitungan Menggunakan Faktor\rJika kita ingin mengetahui jumlah masing-masing observasi pada masing-masing faktor, kita dapat menggunakan fungsi summary(). Berikut adalah contoh penerapannya:\nsummary(faktor)\r## tidak_baik baik ## 2 2\rPada contoh perhitungan menggunakan vektor kita telah membuat objek pendapatan. Pada objek tersebut kita ingin menghitung nilai rata-rata pendapatan berdasarkan objek faktor. Untuk melakukannya kita dapat menggunakan fungsi tapply().\npendapatan\r## Andi Joni Lina Rani ## 2000 1800 2500 3000\rfaktor\r## [1] baik tidak_baik baik tidak_baik\r## Levels: tidak_baik baik\r# Rata-rata pendapatan dan simpan sebagai objek dengan nama:\r# mean_pendapatan\rmean_pendapatan \u0026lt;- tapply(pendapatan, faktor, mean)\rmean_pendapatan\r## tidak_baik baik ## 2400 2250\r# Hitung ukuran/panjang masing-masing grup\rtapply(pendapatan, faktor, length)\r## tidak_baik baik ## 2 2\rUntuk mengetahui jumlah masing-masing observasi masing-masing factor levels kita juga dapat menggunakan fungsi table(). Fungsi tersebut akan membuat frekuensi tabel pada masing-masing factor levels atau yang dikenal sebagai contingency table.\ntable(faktor)\r## faktor\r## tidak_baik baik ## 2 2\r# Cross-tabulation antara\r# faktor dan pendapatan\rtable(pendapatan, faktor)\r## faktor\r## pendapatan tidak_baik baik\r## 1800 1 0\r## 2000 0 1\r## 2500 0 1\r## 3000 1 0\r\r\r2.10 Data Frames\rData frame merupakan kumpulan vektor dengan panjang sama atau dapat pula dikatan sebagai matriks yang memiliki kolom dengan jenis data yang berbeda-beda (numerik, karakter, logical). Pada data frame terdapat baris dan kolom. Baris disebut sebagai observasi, sedangkan kolom disebut sebagai variabel. Sehingga dapat dikatakan bahwa setiap observasi akan memiliki satu atau beberapa variabel.\n2.10.1 Membuat Data Frame\rData frame dapat dibuat menggunakan fungsi data.frame(). Berikut adalah contoh cara membuat data frame:\n# Membuat data frame\rnama \u0026lt;- c(\u0026quot;Andi\u0026quot;,\u0026quot;Rizal\u0026quot;,\u0026quot;Ani\u0026quot;,\u0026quot;Ina\u0026quot;)\rpendapatan \u0026lt;- c(1000, 2000, 3500, 500)\rtinggi \u0026lt;- c(160, 155, 170, 146)\rusia \u0026lt;- c(35, 40, 25, 27)\rmenikah \u0026lt;- c(TRUE, FALSE, TRUE, TRUE)\rdata_teman \u0026lt;- data.frame(nama = nama,\rgaji = pendapatan,\rtinggi = tinggi,\rmenikah = menikah)\rdata_teman\r## nama gaji tinggi menikah\r## 1 Andi 1000 160 TRUE\r## 2 Rizal 2000 155 FALSE\r## 3 Ani 3500 170 TRUE\r## 4 Ina 500 146 TRUE\rUntuk mengecek apakah objek data_teman merupakan data frame, kita dapat menggunakan fungsi is.data.frame(). Jika hasilnya TRUE, maka objek tersebut adalah data frame. Berikut adalah contoh penerapannya:\nis.data.frame(data_teman)\r## [1] TRUE\r\rNote:  untuk konversi objek menjadi data frame, kita dapat menjalankan fungsi as.data.frame().\n\r\r2.10.2 Subset Pada Data Frame\rSubset pada data frame sebenarnya tidak berbeda dengan subset pada matriks. Bedanya adalah kita juga bisa melakukan subset langsung terhadap nama variabel menggunakan dollar sign. Untuk lebih memahaminya berikut adalah jenis subset pada data frame.\n\rPengindeksan positif menggunakan nama dan lokasi.\r\r# Subset menggunakan dollar sign\rdata_teman$nama\r## [1] Andi Rizal Ani Ina ## Levels: Andi Ani Ina Rizal\r# atau data_teman[, \u0026quot;nama\u0026quot;]\r## [1] Andi Rizal Ani Ina ## Levels: Andi Ani Ina Rizal\r# subset baris 1 sampai 3 serta kolom 1 dan 3\rdata_teman[1:3, c(1,3)]\r## nama tinggi\r## 1 Andi 160\r## 2 Rizal 155\r## 3 Ani 170\r\rPengindeksan negatif\r\r# Kecualikan kolom nama\rdata_teman[,-1]\r## gaji tinggi menikah\r## 1 1000 160 TRUE\r## 2 2000 155 FALSE\r## 3 3500 170 TRUE\r## 4 500 146 TRUE\r\rPengideksan berdasarkan karakteristik\r\rKita ingin memilih data dengan kriteria teman yang telah menikah\ndata_teman[data_teman$menikah==TRUE, ]\r## nama gaji tinggi menikah\r## 1 Andi 1000 160 TRUE\r## 3 Ani 3500 170 TRUE\r## 4 Ina 500 146 TRUE\r# Tampilkan hanya kolom nama dan gaji untuk yang telah menikah\rdata_teman[data_teman$menikah==TRUE, 1:2]\r## nama gaji\r## 1 Andi 1000\r## 3 Ani 3500\r## 4 Ina 500\rkita juga dapat menggunakan fungsi subset() agar lebih mudah. Berikut adalah contoh penerapannya:\n# subset terhadap teman yang berusia \u0026gt;=30 tahun\rsubset(data_teman, usia\u0026gt;=30)\r## nama gaji tinggi menikah\r## 1 Andi 1000 160 TRUE\r## 2 Rizal 2000 155 FALSE\rOpsi lain adalah menggunakan fungsi attach() dan detach(). Fungsi attach() mengambil data frame dan membuat kolomnya dapat diakses hanya dengan memberikan nama mereka.\n# attach data frame\rattach(data_teman)\r## The following objects are masked _by_ .GlobalEnv:\r## ## menikah, nama, tinggi\r# ==== memulai data manipulation ====\rdata_teman[usia\u0026gt;=30]\r## nama gaji\r## 1 Andi 1000\r## 2 Rizal 2000\r## 3 Ani 3500\r## 4 Ina 500\r# ==== mengakhiri data manipulation ====\r# detach data frame\rdetach(data_teman)\r\r2.10.3 Memperluas Data Frame\rKita dapat juga memperluas data frame dengan cara menambahkan variabel atau kolombaru pada data frame. Pada contoh kali ini penulis akan menambahkan kolom pendidikan terakhir pada objek data_teman. Berikut adalah sintaks yang digunakan.\n# membuat vektor pendidikan\rpendidikan \u0026lt;- c(\u0026quot;S1\u0026quot;,\u0026quot;S2\u0026quot;,\u0026quot;D3\u0026quot;,\u0026quot;D1\u0026quot;)\r# menambahkan variabel pendidikan pada data frame\rdata_teman$pendidikan \u0026lt;- pendidikan\r# atau\rcbind(data_teman, pendidikan=pendidikan)\r\r2.10.4 Perhitungan Pada Data Frame\rPerhitungan pada variabel numerik data frame pada dasarnya sama dengan perhitungan pada matriks. kita dapat menggunakan fungsi rowSums(), colSums(), rowMeans() dan apply(). Proses perhitungan dan manipulasi pada data frame akan dibahas pada sesi yang lain secara lebih detail.\n\r\r2.11 List\rList adalah kumpulan objek yang diurutkan, yang dapat berupa vektor, matriks, data frame, dll. Dengan kata lain, daftar dapat berisi semua jenis objek R.\n2.11.1 Membuat List\rList dapat dibuat menggunakan fungsi list(). Berikut disajikan contoh sebuah list sebuah keluarga:\n# Membuat list keluarga\rkeluarga \u0026lt;- list(\rayah = \u0026quot;Budi\u0026quot;,\rusia_ayah = 48,\ribu = \u0026quot;Ani\u0026quot;,\rusia_ibu = \u0026quot;47\u0026quot;,\ranak = c(\u0026quot;Andi\u0026quot;, \u0026quot;Adi\u0026quot;),\rusia_anak = c(15,10)\r)\r# Print\rkeluarga\r## $ayah\r## [1] \u0026quot;Budi\u0026quot;\r## ## $usia_ayah\r## [1] 48\r## ## $ibu\r## [1] \u0026quot;Ani\u0026quot;\r## ## $usia_ibu\r## [1] \u0026quot;47\u0026quot;\r## ## $anak\r## [1] \u0026quot;Andi\u0026quot; \u0026quot;Adi\u0026quot; ## ## $usia_anak\r## [1] 15 10\r# Nama elemen dalam list\rnames(keluarga)\r## [1] \u0026quot;ayah\u0026quot; \u0026quot;usia_ayah\u0026quot; \u0026quot;ibu\u0026quot; \u0026quot;usia_ibu\u0026quot; \u0026quot;anak\u0026quot; \u0026quot;usia_anak\u0026quot;\r# Jumlah elemen pada list\rlength(keluarga)\r## [1] 6\r\r2.11.2 Subset List\rKita dapat memilih sebuah elemen pada list dengan menggunakan nama elemen atau indeks dari elemen tersebut. Berikut adalah contoh penerapannya:\n# Subset berdasarkan nama\r# mengambil elemen usia_ayah\rkeluarga$usia_ayah\r## [1] 48\r# Atau\rkeluarga[[\u0026quot;usia_ayah\u0026quot;]]\r## [1] 48\r# Subset berdasarkan indeks\rkeluarga[[2]]\r## [1] 48\r# subset elemen pertama pada keluarga[[5]]\rkeluarga[[5]][1]\r## [1] \u0026quot;Andi\u0026quot;\r\r2.11.3 Memperluas List\rKita juga dapat menambahkan elemen pada list yang telah kita buat. Pada contoh list sebelumnya penulis akan menambahkan elemen keluarga yang lain seperti berikut:\n# Menambahkan kakek dan nenek pada list\rkeluarga$kakek \u0026lt;- \u0026quot;Suprapto\u0026quot;\rkeluarga$nenek \u0026lt;- \u0026quot;Sri\u0026quot;\r# Print\rkeluarga\r## $ayah\r## [1] \u0026quot;Budi\u0026quot;\r## ## $usia_ayah\r## [1] 48\r## ## $ibu\r## [1] \u0026quot;Ani\u0026quot;\r## ## $usia_ibu\r## [1] \u0026quot;47\u0026quot;\r## ## $anak\r## [1] \u0026quot;Andi\u0026quot; \u0026quot;Adi\u0026quot; ## ## $usia_anak\r## [1] 15 10\r## ## $kakek\r## [1] \u0026quot;Suprapto\u0026quot;\r## ## $nenek\r## [1] \u0026quot;Sri\u0026quot;\rKita juga dapat menggabungkan beberapa list menjadi satu. Berikut adalah format sederhana bagaimana cara menggabungkan beberapa list menjadi satu:\nlist_baru \u0026lt;- c(list_a, list_b, list_c, ...)\r\r\r2.12 Loop\rLoop merupakan kode program yang berulang-ulang. Loop berguna saat kita ingin melakukan sebuah perintah yang perlu dijalankan berulang-ulang seperti melakukan perhitungan maupaun melakukan visualisasi terhadap banyak variabel secara serentak. Hal ini tentu saja membantu kita karena kita tidak perlu menulis sejumlah sintaks yang berulang-ulang. Kita hanya perlu mengatur statement berdasarkan hasil yang kita harapkan.\nPada R bentuk loop dapat bermacam-macam (“for loop”,“while loop”, dll). R menyederhanakan bentuk loop ini dengan menyediakan sejumlah fungsi seperti apply(),tapply(), dll. Sehingga loop jarang sekali muncul dalam kode R. Sehingga R sering disebut sebagai loopless loop.\nMeski loop jarang muncul bukan berarti kita tidak akan melakukannya. Terkadang saat kita melakukan komputasi statistik atau matematik dan belum terdapat paket yang mendukung proses tersebut, sering kali kita akan membuat sintaks sendiri berdasarkan algoritma metode tersebut. Pada algoritma tersebut sering pula terdapat loop yang diperlukan selama proses perhitungan. Secara sederhana diagram umum loop ditampilkan pada Figure 1\n\rFigure 1: Diagram umum loop (sumber: Primartha, 2018).\r\r2.12.1 For Loop\rMengulangi sebuah statement atau sekelompok statement sebanyak nilai yang ditentukan di awal. Jadi operasi akan terus dilakukan sampai dengan jumlah yang telah ditetapkan di awal atau dengan kata lain tes kondisi (Jika jumlah pengulangan telah cukup) hanya akan dilakukan di akhir. Secara sederhana bentuk dari for loop dapat dituliskan sebagai berikut:\nfor (value in vector){\rstatements\r}\rBerikut adalah contoh sintaks penerapan for loop:\n# Membuat vektor numerik\rvektor \u0026lt;- c(1:5)\r# loop for(i in vektor){\rprint(i)\r}\r## [1] 1\r## [1] 2\r## [1] 3\r## [1] 4\r## [1] 5\rLoop akan dimulai dari blok statement for sampai dengan print(i). Berdasarkan loop pada contoh tersebut, loop hanya dilakukan sebanyak 5 kali sesuai dengan jumlah vektor yang ada.\n\r2.12.2 While Loop\rWhile loop merupakan loop yang digunakan ketika kita telah menetapkan stop condition sebelumnya. Blok statement/kode yang sama akan terus dijalankan sampai stop condition ini tercapai. Stop condition akan di cek sebelum melakukan proses loop. Berikut adalah pola dari while loop dapat dituliskan sebagai berikut:\nwhile (test_expression){\rstatement\r}\rBerikut adalah contoh penerapan dari while loop:\ncoba \u0026lt;- c(\u0026quot;Contoh\u0026quot;)\rcounter \u0026lt;- 1\r# loop\rwhile (counter\u0026lt;5){\r# print vektor\rprint(coba)\r# tambahkan nilai counter sehingga proses terus berlangsung sampai counter = 5 counter \u0026lt;- counter + 1\r}\r## [1] \u0026quot;Contoh\u0026quot;\r## [1] \u0026quot;Contoh\u0026quot;\r## [1] \u0026quot;Contoh\u0026quot;\r## [1] \u0026quot;Contoh\u0026quot;\rLoop akan dimulai dari blok statement while sampai dengan counter \u0026lt;- 1. Loop hanya akan dilakukan sepanjang nilai counter \u0026lt; 5.\n\r2.12.3 Repeat Loop\rRepeat loop akan menjalankan statement/kode yang sama berulang-ulang hingga stop condition tercapai. Berikut adalah pola dari repeat loop.\nrepeat {\rcommands\rif(condition){\rbreak\r}\r}\rBerikut adalah contoh penerapan dari repeat loop:\ncoba \u0026lt;- c(\u0026quot;contoh\u0026quot;)\rcounter \u0026lt;- 1\rrepeat {\rprint(coba)\rcounter \u0026lt;- counter + 1\rif(counter \u0026lt; 5){\rbreak\r}\r}\r## [1] \u0026quot;contoh\u0026quot;\rLoop akan dimulai dari blok statement while sampai dengan break. Loop hanya akan dilakukan sepanjang nilai counter \u0026lt; 5. Hasil yang diperoleh berbeda dengan while loop, dimana kita memperoleh 4 buah kata “contoh”. Hal ini disebabkan karena repeat loop melakukan pengecekan stop condition tidak di awal loop seperti while loop sehingga berapapun nilainya, selama nilainya sesuai dengan stop condition maka loop akan dihentikan. Hal ini berbeda dengan while loop dimana proses dilakukan berulang-ulang sampai jumlahnya mendekati stop condition.\n\r2.12.4 Break\rBreak sebenarnya bukan bagian dari loop, namun sering digunakan dalam loop. Break dapat digunakan pada loop manakala dirasa perlu, yaitu saat kondisi yang disyaratkan pada break tercapai.\nBerikut adalah contoh penerapan break pada beberapa jenis loop.\n# for loop\ra = c(2,4,6,8,10,12,14)\rfor(i in a){\rif(i\u0026gt;8){\rbreak\r}\rprint(i)\r}\r## [1] 2\r## [1] 4\r## [1] 6\r## [1] 8\r# while loop\ra = 2\rb = 4\rwhile(a\u0026lt;7){\rprint(a)\ra = a +1\rif(b+a\u0026gt;10){\rbreak\r}\r}\r## [1] 2\r## [1] 3\r## [1] 4\r## [1] 5\r## [1] 6\r# repeat loop\ra = 1\rrepeat{\rprint(a)\ra = a+1\rif(a\u0026gt;6){\rbreak\r}\r}\r## [1] 1\r## [1] 2\r## [1] 3\r## [1] 4\r## [1] 5\r## [1] 6\r\r\r2.13 Decision Making\rDecicion Making atau sering disebut sebagai if then else statement merupakan bentuk percabagan yang digunakan manakala kita ingin agar program dapat melakukan pengujian terhadap syarat kondisi tertentu. Pada Table 5 disajikan daftar percabangan yang digunakan pada R.\nTable 5 Daftar percabangan pada R\n\r\r\r\rStatement\rKeterangan\r\r\r\rif statement\rif statement hanya terdiri atas sebuah ekspresi Boolean, dan diikuti satu atau lebih statement\r\rif…else statement\rif else statement terdiri atas beberapa buah ekspresi Boolean. Ekspressi Boolean berikutnya akan dijalankan jika ekspresi *Boolan sebelumnya bernilai FALSE\r\rswitch statement\rswitch statement digunakan untuk mengevaluasi sebuah variabel beberapa pilihan\r\r\r\r2.13.1 if statement\rPola if statement disajikan pada Figure 2\n\rFigure 2: Diagram if statement (sumber: Primartha, 2018).\r\rBerikut adalah contoh penerapan if statement:\nx \u0026lt;- c(1:5)\rif(is.vector(x)){\rprint(\u0026quot;x adalah sebuah vector\u0026quot;)\r}\r## [1] \u0026quot;x adalah sebuah vector\u0026quot;\r\r2.13.2 if else statement\rPola dari if else statement disajikan pada Figure 3\n\rFigure 3: Diagram if else statement (sumber: Primartha, 2018).\r\rBerikut adalah contoh penerapan if else statement:\nx \u0026lt;- c(\u0026quot;Andi\u0026quot;,\u0026quot;Iwan\u0026quot;, \u0026quot;Adi\u0026quot;)\rif(\u0026quot;Rina\u0026quot; %in% x){\rprint(\u0026quot;Rina ditemukan\u0026quot;)\r} else if(\u0026quot;Adi\u0026quot; %in% x){\rprint(\u0026quot;Adi ditemukan\u0026quot;)\r} else{\rprint(\u0026quot;tidak ada yang ditemukan\u0026quot;)\r}\r## [1] \u0026quot;Adi ditemukan\u0026quot;\r\r2.13.3 switch statement\rPola dari switch statement disajikan pada Figure 4\n\rFigure 4: Diagram switch statement (sumber: Primartha, 2018).\r\rBerikut adalah contoh penerapan switch statement:\ny = 3\rx = switch(\ry,\r\u0026quot;Selamat Pagi\u0026quot;,\r\u0026quot;Selamat Siang\u0026quot;,\r\u0026quot;Selamat Sore\u0026quot;,\r\u0026quot;Selamat Malam\u0026quot;\r)\rprint(x)\r## [1] \u0026quot;Selamat Sore\u0026quot;\r\r\r2.14 Fungsi\rFungsi merupakan sekumpulan instruksi atau statement yang dapat melakukan tugas khusus. Sebagai contoh fungsi perkalian untuk menyelesaikan operasi perkalian, fungsi pemangkatan hanya untuk operasi pemangkatan, dll.\nPada R terdapat 2 jenis fungsi, yaitu: build in fuction dan user define function. build in fnction merupakan fungsi bawaan R saat pertama kita menginstall R. Contohnya adalah mean(), sum(), ls(), rm(), dll. Sedangkan user define fuction merupakan fungsi-fungsi yang dibuat sendiri oleh pengguna.\nFungsi-fungsi buatan pengguna haruslah dideklarasikan (dibuat) terlebih dahulu sebelum dapat dijalankan. Pola pembentukan fungsi adalah sebagai berikut:\nfunction_name \u0026lt;- function(argument_1, argument_2, ...){\rfunction body\r}\r\rNote: \n\rfunction_name : Nama dari fungsi R. R akan menyimpan fungsi tersebut sebagai objek\rargument_1, argument_2,… : Argument bersifat opsional (tidak wajib). Argument dapat digunakan untuk memberi inputan kepada fungsi\rfunction body : Merupakan inti dari fungsi. Fuction body dapat terdiri atas 0 statement (kosong) hingga banyak statement.\rreturn : Fungsi ada yang memiliki output atau return value ada juga yang tidak. Jika fungsi memiliki return value maka return value dapat diproses lebih lanjut\r\r\rBerikut adalah contoh penerapan user define function:\n# Fungsi tanpa argument\rbilang \u0026lt;- function(){\rprint(\u0026quot;Hello World!!\u0026quot;)\r}\r# Print\rbilang()\r## [1] \u0026quot;Hello World!!\u0026quot;\r# Fungsi dengan argumen\rtambah \u0026lt;- function(a,b){\rprint(a+b)\r}\r# Print\rtambah(5,3)\r## [1] 8\r# Fungsi dengan return value\rkali \u0026lt;- function(a,b){\rreturn(a*b)\r}\r# Print\rkali(4,3)\r## [1] 12\rReferensi\nPrimartha, R. 2018. Belajar Machine Learning Teori dan Praktik. Penerbit Informatika : Bandung.\rRosadi,D. 2016. Analisis Statistika dengan R. Gadjah Mada University Press: Yogyakarta.\rSTHDA. Easy R Programming Basics. http://www.sthda.com/english/wiki/easy-r-programming-basics\rVenables, W.N. Smith D.M. and R Core Team. 2018. An Introduction to R. R Manuals.\rThe R Core Team. 2018. R: A Language and Environment for Statistical Computing. R Manuals.\r\r\r","date":1552064400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552064400,"objectID":"04b73e5721338a9dc2554955dc4acf7e","permalink":"/tutorial/02_sintaks-bahasa-r/","publishdate":"2019-03-09T00:00:00+07:00","relpermalink":"/tutorial/02_sintaks-bahasa-r/","section":"tutorial","summary":"Daftar Isi\r\rOperator Aritmatika\rFungsi Aritmetik\rOperator Relasi\rOperator Logika\rMemasukkan Nilai Kedalam Variabel\rTipe Data\rVektor\rMatriks\rFaktor\rData Frames\rList\rLoop\rDecision Making\rFungsi\r\r\r2.1 Operator Aritmatika\rProses perhitungan akan ditangani oleh fungsi khusus. R akan memahami urutannya secara benar. Kecuali kita secara eksplisit menetapkan yang lain. Sebagai contoh jalankan sintaks berikut:\n2+4*2\r## [1] 10\rBandingkan dengan sintaks berikut:\n(2+4)*2\r## [1] 12\r\rR dapat digunakan sebagai kalkulator","tags":null,"title":"2. Sintaks Bahasa R","type":"docs"},{"authors":null,"categories":null,"content":"\r\rNote: \n\rVisualisasi Data Menggunakan Fungsi plot\rMatriks Scatterplot\rBox plot\rBar Plot\r\r\r4.1 Visualisasi Data Menggunakan Fungsi plot()\rFungsi plot() merupakan fungsi umum yang digunakan untuk membuat plot pada R. Format dasarnya adalah sebagai berikut:\nplot(x, y, type=\u0026quot;p\u0026quot;)\r\rNote: \n\rx dan y: titik koordinat plot Berupa variabel dengan panjang atau jumlah observasi yang sama.\rtype: jenis grafik yang hendak dibuat. Nilai yang dapat dimasukkan antara lain:\rtype=“p” : membuat plot titik atau scatterplot. Nilai ini merupakan default pada fungsi plot().\rtype=“l” : membuat plot garis.\rtype=“b” : membuat plot titik yang terhubung dengan garis.\rtype=“o” : membuat plot titik yang ditimpa oleh garis.\rtype=“h” : membuat plot garis vertikal dari titik ke garis y=0.\rtype=“s” : membuat fungsi tangga.\rtype=“n” : tidak membuat grafik plot sama sekali, kecuali plot dari axis. Dapat digunakan untuk mengatur tampilan suatu plot utama yang diikuti oleh sekelompok plot tambahan.\r\r\rUntuk lebih memahaminya berikut penulis akan sajikan contoh untuk masing-masing grafik tersebut. Berikut adalah contoh sintaks dan hasil plot yang disajikan pada Figure 1:\n# membuat vektor data x \u0026lt;- c(1:10); y \u0026lt;- x^2\r# membagi jendela grafik menajdi 4 baris dan 2 kolom\rpar(mfrow=c(3,3))\r# loop\rtype \u0026lt;- c(\u0026quot;p\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;o\u0026quot;,\u0026quot;h\u0026quot;,\u0026quot;s\u0026quot;,\u0026quot;n\u0026quot;)\rfor (i in type){\rplot(x,y, type= i,\rmain= paste(\u0026quot;type=\u0026quot;, i))\r}\r\rFigure 1: Plot berbagai jenis setting type\r\rPada contoh selanjutnya akan dilakukan plot terhadap dataset trees. Untuk memuatnya jalankan sintaks berikut:\nlibrary(tibble)\r# memuat dataset\rtrees \u0026lt;- as_tibble(trees)\r# print trees\r## # A tibble: 31 x 3\r## Girth Height Volume\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 8.3 70 10.3\r## 2 8.6 65 10.3\r## 3 8.8 63 10.2\r## 4 10.5 72 16.4\r## 5 10.7 81 18.8\r## 6 10.8 83 19.7\r## 7 11 66 15.6\r## 8 11 75 18.2\r## 9 11.1 80 22.6\r## 10 11.2 75 19.9\r## # ... with 21 more rows\rPada dataset tersebut kita ingin membuat scatterplot untuk melihat korelasi antara variabel Height dan Volume. Untuk melakukannya jalankan sintaks berikut:\nplot(trees$Height, trees$Volume)\r# atau with(trees, plot(Height, Volume))\r\rFigure 2: Scatterplot Height vs Volume\r\rKita juga dapat menggunakan formula untuk membuat scatterplot pada Figure 2. Berikut adalah contoh sintaks yang digunakan:\nx \u0026lt;- trees$Height\ry \u0026lt;- trees$Volume\rplot(y~x)\rFungsi plot() juga dapat digunakan untuk membentuk matriks scatterplot. Untuk membuatnya kita hanya perlu memasukkan seluruh dataset kedalam fungsi plot(). Berikut adalah sintaks dan output yang dihasilkan berupa Figure 3:\nplot(trees)\r\rFigure 3: Matriks scatterplot dataset trees\r\rSelain itu jika kita memasukkan objek lm() yang merupakan fungsi untuk melakukan operasi regresi linier pada fungsi plot(), output yang dihasilkan berupa plot diagnostik yang berguna untuk menguji asumsi model regresi linier. Berikut adalah contoh sintaks dan output yang dihasilkan pada Figure 4:\n# membagi jendela grafik menjadi 2 baris dan 2 kolom\rpar(mfrow=c(2,2))\r# plot\rplot(lm(Volume~Height, data=trees))\r\rFigure 4: Plot diagnostik regresi linier\r\rSelain objek-objek tersebut, fungsi plot() akan banyak digunakan dalam analisis statistika kita pada chapter lainnya.\n\r4.2 Matriks Scatterplot\rPada bagian sebelumnya kita telah belajar bagaimana membuat matriks scatterplot mengggunakan fungsi plot(). Pada bagian ini kita akan belajar cara membuat matriks scatterplot menggunakan fungsi pairs(). Secara umum format fungsi dituliskan sebagai berikut:\npairs(data, lower.panel=NULL)\r\rNote: \n\rdata: data frame\rlower.panel: menampilkan atau tidak menampilkan panel bawah\r\r\rUntuk lebih memahami penggunaan fungsi tersebut, berikut akan disajikan contoh penggunaannya pada dataset iris. Sebelum melakukannya jalankan sintaks berikut untuk memuat dataset:\n# memuat dataset irir\riris \u0026lt;- as_tibble(iris)\r# print\riris\r## # A tibble: 150 x 5\r## Sepal.Length Sepal.Width Petal.Length Petal.Width Species\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ## 7 4.6 3.4 1.4 0.3 setosa ## 8 5 3.4 1.5 0.2 setosa ## 9 4.4 2.9 1.4 0.2 setosa ## 10 4.9 3.1 1.5 0.1 setosa ## # ... with 140 more rows\rUntuk membuat matriks scatterplot kita hanya perlu memasukkan objek iris kedalam fungsi pairs(). Berikut adalah sintaks yang digunakan dan output yang dihasilkan pada Figure 5:\npairs(iris)\r\rFigure 5: Matriks scatterplot iris\r\rKita dapat melakukan drop terhadap panel bawah grafik tersebut. Untuk melakukannya kita perlu memasukkan parameter lower.panel=NULL. Output yang dihasilkan akan tampak seperti pada Figure 6.\npairs(iris, lower.panel=NULL)\r\rFigure 6: Matriks scatterplot iris tanpa panel bawah\r\rKita dapat merubah warna titik berdasarkan factor Species. Langkah pertama yang perlu dilakukan adalah melakukan drop variabel Species pada dataset dan memasukkan objek baru tanpa variabel tersebut kedalam fungsi pairs(). Warna berdasarkan grup diberikan dengan menambahkan parameter col= pada fungsi pairs(). Berikut adalah contoh penerapannya dan output yang dihasilkan pada Figure 7:\n# drop variabel Species\r# simpan dataset baru pada objek iris2\riris2 \u0026lt;- iris[ ,1:4]\r# print\riris2\r## # A tibble: 150 x 4\r## Sepal.Length Sepal.Width Petal.Length Petal.Width\r## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 5.1 3.5 1.4 0.2\r## 2 4.9 3 1.4 0.2\r## 3 4.7 3.2 1.3 0.2\r## 4 4.6 3.1 1.5 0.2\r## 5 5 3.6 1.4 0.2\r## 6 5.4 3.9 1.7 0.4\r## 7 4.6 3.4 1.4 0.3\r## 8 5 3.4 1.5 0.2\r## 9 4.4 2.9 1.4 0.2\r## 10 4.9 3.1 1.5 0.1\r## # ... with 140 more rows\r# spesifikasi vaktor warna titik berdasarkan spesies\rmy_col \u0026lt;- c(\u0026quot;#00AFBB\u0026quot;, \u0026quot;#E7B800\u0026quot;, \u0026quot;#FC4E07\u0026quot;)\r# plot\rpairs(iris2, lower.panel=NULL,\r# spesifikasi warna\rcol= my_col[iris$Species])\r\rFigure 7: Matriks scatterplot iris tanpa panel bawah\r\rKita juga dapat mengganti panel bawah menjadi nilai korelasi antar variabel. Untuk melakukannya kita perlu mendefinisikan sebuah fungsi untuk panel bawah dan panel atas (jika ingin warna titik berdasarkan factor). Setelah fungsi panel bawah dan atas didefinisikan, langkah selanjutnya adalah melakukan memasukkan nilainya kedalam fungsi pairs(). Berikut adalah sintaks yang digunakan serta output yang dihasilkan pada Figure 8:\n# membuat fungsi untuk menghitung\r# nilai korelasi yang ditempatkan pada panel bawah\rpanel.cor \u0026lt;- function(x, y){\r# definisi parameter grafik usr \u0026lt;- par(\u0026quot;usr\u0026quot;); on.exit(par(usr))\rpar(usr = c(0, 1, 0, 1))\r# menghitung koefisien korelas\rr \u0026lt;- round(cor(x, y), digits=2)\r# menambahkan text berdasarkan koefisien korelasi\rtxt \u0026lt;- paste0(\u0026quot;R = \u0026quot;, r)\r# mengatur besar text sesuai besarnya nilai korelasi\rcex.cor \u0026lt;- 0.8/strwidth(txt)\rtext(0.5, 0.5, txt, cex = cex.cor * abs(r))\r}\r# kustomisasi panel atas agar\r# warna titik berdasarkan factor\rmy_col \u0026lt;- c(\u0026quot;#00AFBB\u0026quot;, \u0026quot;#E7B800\u0026quot;, \u0026quot;#FC4E07\u0026quot;)\rupper.panel\u0026lt;-function(x, y){\rpoints(x,y, col = my_col[iris$Species])\r}\rpairs(iris2,\rlower.panel= panel.cor,\rupper.panel= upper.panel)\r\rFigure 8: Matriks scatterplot iris dengan koefisien korelasi\r\rJika kita tidak ingin nilai korelasi ditampilkan di panel bawah, kita dapat merubahnya sehingga dapat tampil pada panel atas bersamaan dengan scatterplot. Untuk melakukannya kita perlu mendefinisikan fungsi pada panel atas dan memasukkannya pada parameter upper.panel=. Berikut adalah sintaks yang digunakan beserta output yang dihasilkan pada Figure 9:\n# kustomisasi panel atas\rupper.panel\u0026lt;-function(x, y){\rpoints(x,y, col=c(\u0026quot;#00AFBB\u0026quot;, \u0026quot;#E7B800\u0026quot;, \u0026quot;#FC4E07\u0026quot;)[iris$Species])\rr \u0026lt;- round(cor(x, y), digits=2)\rtxt \u0026lt;- paste0(\u0026quot;R = \u0026quot;, r)\rusr \u0026lt;- par(\u0026quot;usr\u0026quot;); on.exit(par(usr))\rpar(usr = c(0, 1, 0, 1))\rtext(0.5, 0.9, txt)\r}\r# plot\rpairs(iris2, lower.panel = NULL, upper.panel = upper.panel)\r\rFigure 9: Matriks scatterplot iris dengan koefisien korelasi di panel atas\r\r\r4.3 Box plot\rBox plot pada R dapat dibuat menggunakan fungsi boxplot(). Berikut adalah sintaks untuk membuat boxplot variabel Sepal.Lenght pada dataset iris dan output yang dihasilkan pada Figure 10:\nboxplot(iris$Sepal.Length)\r\rFigure 10: Boxplot variabel Sepal.Length\r\rBoxplot juga dapat dibuat berdasarkan variabel factor. Hal ini berguna untuk melihat perbedaan ditribusi data pada masing-masing grup. Pada sintaks berikut dibuat boxplot berdasarkan variabel Species. Output yang dihasilkan disajikan pada Figure 11:\nboxplot(iris$Sepal.Length~iris$Species)\r\rFigure 11: Boxplot berdasarkan variabel species\r\rKita juga dapat mengubah warna outline dan box pada boxplot. Berikut adalah contoh sintaks yang digunakan untuk melakukannya dan output yang dihasilkan disajikan pada Figure 12:\nboxplot(iris$Sepal.Length~iris$Species,\r# ubah warna outline menjadi steelblue\rborder = \u0026quot;steelblue\u0026quot;,\r# ubah warna box berdasarkan grup\rcol= c(\u0026quot;#999999\u0026quot;, \u0026quot;#E69F00\u0026quot;, \u0026quot;#56B4E9\u0026quot;))\r\rFigure 12: Boxplot dengan warna berdasarkan spesies\r\rKita juga dapat membuat boxplot pada multiple group. Data yang digunakan untuk contoh tersebut adalah dataset ToothGrowth. Berikut adalah sintaks untuk memuat dataset tersebut:\n# memuat dataset sebagai tibble\rToothGrowth \u0026lt;- as_tibble(ToothGrowth)\r# print\rToothGrowth\r## # A tibble: 60 x 3\r## len supp dose\r## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 4.2 VC 0.5\r## 2 11.5 VC 0.5\r## 3 7.3 VC 0.5\r## 4 5.8 VC 0.5\r## 5 6.4 VC 0.5\r## 6 10 VC 0.5\r## 7 11.2 VC 0.5\r## 8 11.2 VC 0.5\r## 9 5.2 VC 0.5\r## 10 7 VC 0.5\r## # ... with 50 more rows\r# ubah variable dose menjadi factor\rToothGrowth$dose \u0026lt;- as.factor(ToothGrowth$dose)\r# print\rToothGrowth\r## # A tibble: 60 x 3\r## len supp dose ## \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt;\r## 1 4.2 VC 0.5 ## 2 11.5 VC 0.5 ## 3 7.3 VC 0.5 ## 4 5.8 VC 0.5 ## 5 6.4 VC 0.5 ## 6 10 VC 0.5 ## 7 11.2 VC 0.5 ## 8 11.2 VC 0.5 ## 9 5.2 VC 0.5 ## 10 7 VC 0.5 ## # ... with 50 more rows\rContoh sintaks dan output boxplot multiple group disajikan pada Figure 13:\nboxplot(len ~ supp*dose, data = ToothGrowth,\rcol = c(\u0026quot;white\u0026quot;, \u0026quot;steelblue\u0026quot;))\r\rFigure 13: Boxplot multiple group\r\r\r4.4 Bar Plot\rBarplot pada R dapat dibuat menggunakan fungsi barplot(). Untuk lebih memahaminya berikut disajikan contoh barplot menggunakan dataset VADeaths. Untuk memuatnya jalankan sintaks berikut:\nVADeaths\r## Rural Male Rural Female Urban Male Urban Female\r## 50-54 11.7 8.7 15.4 8.4\r## 55-59 18.1 11.7 24.3 13.6\r## 60-64 26.9 20.3 37.0 19.3\r## 65-69 41.0 30.9 54.6 35.1\r## 70-74 66.0 54.3 71.1 50.0\rContoh bar plot untuk variabel Rural Male disajikan pada Figure 14:\npar(mfrow=c(1,2))\rbarplot(VADeaths[, \u0026quot;Rural Male\u0026quot;], main=\u0026quot;a\u0026quot;)\rbarplot(VADeaths[, \u0026quot;Rural Male\u0026quot;], main=\u0026quot;b\u0026quot;, horiz=TRUE)\r\rFigure 14: a. bar plot vertikal, b. bar plot horizontal\r\rpar(mfrow=c(1,1))\rKita dapat mengubah warna pada masing-masing bar, baik outline bar maupun box pada bar. Selain itu kita juga dapat mengubah nama grup yang telah dihasilkan sebelumnya. Berikut sintaks untuk melakukannya dan output yang dihasilkan pada Figure 15:\nbarplot(VADeaths[, \u0026quot;Rural Male\u0026quot;],\r# ubah warna ouline menjadi steelblue\rborder=\u0026quot;steelblue\u0026quot;,\r# ubah wana box\rcol= c(\u0026quot;grey\u0026quot;, \u0026quot;yellow\u0026quot;, \u0026quot;steelblue\u0026quot;, \u0026quot;green\u0026quot;, \u0026quot;orange\u0026quot;),\r# ubah nama grup dari A sampai E\rnames.arg = LETTERS[1:5],\r# ubah orientasi menajadi horizontal\rhoriz=TRUE)\r\rFigure 15: Kustomisasi bar plot\r\rUntuk bar plot dengan multiple group, tersedia dua pengaturan posisi yaitu stacked bar plot(menunjukkan proporsi penyusun pada masing-masing grup) dan grouped bar plot(melihat perbedaan individual pada masing-masing grup). Pada Figure 16 dan Figure 17 , disajikan kedua jenis bar plot tersebut.\n# staked\rbarplot(VADeaths,\rcol = c(\u0026quot;lightblue\u0026quot;, \u0026quot;mistyrose\u0026quot;, \u0026quot;lightcyan\u0026quot;, \u0026quot;lavender\u0026quot;, \u0026quot;cornsilk\u0026quot;),\rlegend = rownames(VADeaths))\r\rFigure 16: Stacked bar plot\r\r# grouped\rbarplot(VADeaths,\rcol = c(\u0026quot;lightblue\u0026quot;, \u0026quot;mistyrose\u0026quot;, \u0026quot;lightcyan\u0026quot;, \u0026quot;lavender\u0026quot;, \u0026quot;cornsilk\u0026quot;),\rlegend = rownames(VADeaths), beside = TRUE)\r\rFigure 17: Grouped bar plot\r\r\r","date":1552064400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1552064400,"objectID":"4921e253b061a9caad56dc8e69865c64","permalink":"/tutorial/04_visualisasi-data-menggunakan-fungsi-dasar-r/","publishdate":"2019-03-09T00:00:00+07:00","relpermalink":"/tutorial/04_visualisasi-data-menggunakan-fungsi-dasar-r/","section":"tutorial","summary":"Note: \n\rVisualisasi Data Menggunakan Fungsi plot\rMatriks Scatterplot\rBox plot\rBar Plot\r\r\r4.1 Visualisasi Data Menggunakan Fungsi plot()\rFungsi plot() merupakan fungsi umum yang digunakan untuk membuat plot pada R. Format dasarnya adalah sebagai berikut:\nplot(x, y, type=\u0026quot;p\u0026quot;)\r\rNote: \n\rx dan y: titik koordinat plot Berupa variabel dengan panjang atau jumlah observasi yang sama.\rtype: jenis grafik yang hendak dibuat. Nilai yang dapat dimasukkan antara lain:\rtype=“p” : membuat plot titik atau scatterplot.","tags":null,"title":"3. Visualisasi Data Menggunakan Fungsi Dasar R","type":"docs"},{"authors":null,"categories":["R"],"content":"\rR merupakan bahasa pemrograman yang banyak digunakan untuk melakukan analisa statistik. Penggunaannya yang mudah, jumlah paket yang banyak, serta dapat digunakan oleh seluruh kalangan secara gratis membuatnya menjadi salah satu bahasa pemrograman yang paling banyak digunakan. Untuk itu sayang sekali jika kita tidak menggunakannya karena R merupakan bahasa pemrograman yang sangat powerfull.\nAlasan tersebut membuat penulis sadar bahwa pbetapa pentingnya untuk menyajikan panduan lengkap penggunaan R untuk aplikasinya dalam bidang statistik bahkan lebih jauh dapat digunakan untuk analisa lain seperti membuat model matematik dan optimasi sistem meskipun R tidak didesain untuk melakukannya.\nPenulis telah membuat tutorial langkah-langkah penggunaan R yang dapat dibaca pada section Tutorial yang akan diupdate setiap minggu. Adapun tema yang akan dibahas mengenai R antara lain penerapannya dalam bidang: 1. Statistik 2. Visualisasi Data 3. Model Matematik 4. Model Sistem Dinamik 5. Optimasi (mis: linear Programming)\n","date":1551579194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551579194,"objectID":"733152f9f49322133ba36687c628c954","permalink":"/post/mengenal-r/mengenal-lebih-jauh-r/","publishdate":"2019-03-02T21:13:14-05:00","relpermalink":"/post/mengenal-r/mengenal-lebih-jauh-r/","section":"post","summary":"R merupakan bahasa pemrograman yang banyak digunakan untuk melakukan analisa statistik. Penggunaannya yang mudah, jumlah paket yang banyak, serta dapat digunakan oleh seluruh kalangan secara gratis membuatnya menjadi salah satu bahasa pemrograman yang paling banyak digunakan. Untuk itu sayang sekali jika kita tidak menggunakannya karena R merupakan bahasa pemrograman yang sangat powerfull.\nAlasan tersebut membuat penulis sadar bahwa pbetapa pentingnya untuk menyajikan panduan lengkap penggunaan R untuk aplikasinya dalam bidang statistik bahkan lebih jauh dapat digunakan untuk analisa lain seperti membuat model matematik dan optimasi sistem meskipun R tidak didesain untuk melakukannya.","tags":["R Markdown","Tutorial"],"title":"Mengenal Lebih Jauh R Melalui Tutorial","type":"post"},{"authors":["Mohammad Rosidi, S.T."],"categories":[],"content":" from IPython.core.display import Image Image('https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png')  print(\u0026quot;Welcome to Academic!\u0026quot;)  Welcome to Academic!  Install Python and Jupyter Install Anaconda which includes Python 3 and Jupyter notebook.\nOtherwise, for advanced users, install Jupyter notebook with pip3 install jupyter.\nCreate a new blog post as usual Run the following commands in your Terminal, substituting \u0026lt;MY_WEBSITE_FOLDER\u0026gt; and my-post with the file path to your Academic website folder and a name for your blog post (without spaces), respectively:\ncd \u0026lt;MY_WEBSITE_FOLDER\u0026gt; hugo new --kind post post/my-post cd \u0026lt;MY_WEBSITE_FOLDER\u0026gt;/content/post/my-post/  Create or upload a Jupyter notebook Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (New \u0026gt; Python Notebook) or upload a notebook.\njupyter notebook  Convert notebook to Markdown jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=. # Copy the contents of Untitled.md and append it to index.md: cat Untitled.md | tee -a index.md # Remove the temporary file: rm Untitled.md  Edit your post metadata Open index.md in your text editor and edit the title etc. in the front matter according to your preference.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with Academic.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in Academic using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with Academic","type":"post"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.\n  Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1483203600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1483203600,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00+07:00","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":null,"content":"This project is a website in the form of a collection of topics related to data analysis and modeling in the environmental field. This website is structured in such a way as to contain a number of material related to statistics, advanced mathematics, environmental engineering modeling, and operations research in the field of environmental engineering.\nThe website is updated every week where each author update will share on the author\u0026rsquo;s social media account. Readers can continue to follow the writing on the website by visiting the site environmental learning.wordpress.com.\n","date":1461690000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461690000,"objectID":"a0e4c49a97de4c62f04b541c8d10b613","permalink":"/project/environmental-learning-website/","publishdate":"2016-04-27T00:00:00+07:00","relpermalink":"/project/environmental-learning-website/","section":"project","summary":"This project is a website in the form of a collection of topics related to data analysis and modeling in the environmental field. This website is structured in such a way as to contain a number of material related to statistics, advanced mathematics, environmental engineering modeling, and operations research in the field of environmental engineering.\nThe website is updated every week where each author update will share on the author\u0026rsquo;s social media account.","tags":["R","Statistics"],"title":"Environmental Learning Website Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1461690000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461690000,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00+07:00","relpermalink":"/project/external-project/","section":"project","summary":"Author repository collection on `Github`.","tags":["R"],"title":"External Project","type":"project"},{"authors":["Mohammad Rosidi, S.T."],"categories":null,"content":" Academic makes it easy to create a beautiful website for free using Markdown. Customize anything on your site with widgets, themes, and language packs.\nFollow our easy step by step guide to learn how to build your own free website with Academic. Check out the personal demo or the business demo of what you\u0026rsquo;ll get in less than 10 minutes.\n View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n         Ecosystem  Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site Academic Scripts: Scripts to help migrate content to new versions of Academic  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461085200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515776400,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2016-04-20T00:00:00+07:00","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website or blog in under 10 minutes.","tags":["Academic"],"title":"Academic: the website designer for Hugo","type":"post"},{"authors":null,"categories":["R"],"content":"\rR Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00\rfit \u0026lt;- lm(dist ~ speed, data = cars)\rfit\r## ## Call:\r## lm(formula = dist ~ speed, data = cars)\r## ## Coefficients:\r## (Intercept) speed ## -17.579 3.932\r\rIncluding Plots\rYou can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1))\rpie(\rc(280, 60, 20),\rc(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;),\rcol = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;),\rinit.angle = -50, border = NA\r)\r\rFigure 1: A fancy pie chart.\r\r\r","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"},{"authors":null,"categories":null,"content":"\r\rMoh Rosidi - Curriculum Vitae\r\r\r\r\rMoh. Rosidi\rMaster Student\r\r\re: rosidi.mohammad@yahoo.com\rw: environmental-data-modeling.netlify.com/\rm: 082128770438\r\r\r\r\r\r\rPersonal Profile\r\rI am a master’s student in Environmental Engineering, Institut Teknologi Bandung with fields of Technology and Environmental Management. Currently active writers in communities such as R Indonesia and Machine Learning ID. Besides being active in the community, I also active in writing blogs. The theme of the blog is related to data analytics and environmental modeling.\n\r\r\r\r\rWork Experience\r\r\rPROPER Assessment Assistant KLHK\rAugust 2017 - August 2017\nResponsibilities include:\r- Check and evaluate company environmental management reports\r- make reports regarding the management and PROPER rating of the company (eg: black, red, or blue)\n\r\rMember of the Field Surveyor Team Dinas PU Cipta Karya\rAugust 2017 - September 2017\nResponsibilities include:\r- Conduct field surveys to verify data on homes that do not have defecation facilities\r- Make technology recommendations (eg individual septic tanks, communal septic tanks, or local waste treatment plants) based on the results of field surveys\n\r\rAssistant Professor at ITS\rAugust 2017 - August 2018\nResponsibilities include:\r- Helping lecturer research\r- Assist the process of preparing teaching books\n\r\r\r\r\rKey Skills\r\rEnvironmental Management\rEnvironmental Modeling\rData Analytics\rR\rSPSS\rSystem Dynamic\rMS. Office\rStatistics\r\r\r\r\r\rEducation\r\r\rCollege/University\rQualification\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ultricies massa et erat luctus hendrerit. Curabitur non consequat enim.\n\r\rCollege/University\rQualification\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ultricies massa et erat luctus hendrerit. Curabitur non consequat enim.\n\r\r\r\r\r\rvar gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : \"http://www.\");\rdocument.write(unescape(\"%3Cscript src='\" + gaJsHost + \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\r\rvar pageTracker = _gat._getTracker(\"UA-3753241-1\");\rpageTracker._initData();\rpageTracker._trackPageview();\r\r\r","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9780949a3024bbdfdb7ce88dfaa4afe3","permalink":"/cv/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/cv/","section":"","summary":"Moh Rosidi - Curriculum Vitae\r\r\r\r\rMoh. Rosidi\rMaster Student\r\r\re: rosidi.mohammad@yahoo.com\rw: environmental-data-modeling.netlify.com/\rm: 082128770438\r\r\r\r\r\r\rPersonal Profile\r\rI am a master’s student in Environmental Engineering, Institut Teknologi Bandung with fields of Technology and Environmental Management. Currently active writers in communities such as R Indonesia and Machine Learning ID. Besides being active in the community, I also active in writing blogs.","tags":null,"title":"","type":"page"},{"authors":["Mohammad Rosidi","Mohammad Razif"],"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"98a16eebf121a69c91ade830fd98e0bc","permalink":"/publication/perancangan-ipal/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/publication/perancangan-ipal/","section":"publication","summary":"The paper industry is an industry that produces large amounts of liquid waste. In addition, the content of pollutant parameters in the paper coloring process is very high. Based on East Java Governor no. 72 of 2013 there are 5 quality standards for wastewater that must be met before being discharged into water bodies. The parameters that need to be processed are pH, COD, BOD, TSS, and Pb. In the design used primary data in the form of debit data and waste characteristics taken from the fine paper industry of PT. Sido Sidoarjo. Waste treated comes from the paper coloring process. Characteristics of treated waste have a value of TSS41000 mg / l, COD 45384 mg / l, BOD 8300 mg / l, Pb 0.56 mg / l and pH 7.7. The planned WWTP unit consists of precedimentation, equalization tanks, fast stirring tanks , slow stirrer, sedimentation 2, and ABR-ABF. Calculation of BOQ and RAB using HSPK Surabaya City 2015 and obtained a figure of Rp217,650,760 for the construction of all units of WWTP.","tags":[],"title":"Perancangan Instalasi Pengolahan Air Limbah (IPAL) Industri Kertas Halus","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]